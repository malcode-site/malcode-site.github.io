[{"title":"golang入门指南","path":"/2024/09/12/golang/zh-cn/","content":"编程语言学习大纲学习一门编程语言大概需要学习以下的这些知识点, 当然, 不同语言有不同的特点, 会有一些差异. git 仓库course-repositoryhttps://github.com/malred/go-course 变量变量相当于指定一段内存空间, 这段空间里的值就是变量的值, 而变量的类型规定了这段空间的大小 go定义变量有多种方式 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package mainimport &quot;fmt&quot;// 全局变量var a int = 1func main() &#123;\t// 不指定类型\tvar variable1 = 100\tvar variable2 = &quot;Golang&quot;\tvar variable3 = 750.345\t// 不赋初始值 (此时值为默认值)\tvar variable4 int\tvar variable5 string\tvar variable6 float64\t// 赋值\tvariable4 = 300\t// 同时给多个同类型的变量赋值\tvar variable7, variable8, variable9 int = 1, 2, 3\t// 同时给多个不同类型的变量赋值\tvar variable10, variable11, variable12 = 1, &quot;Golang&quot;, 3.14\t// 短变量声明+初始化, 会自动推导类型\tvariable13 := 100\tvariable14 := &quot;Golang&quot;\tvariable15 := 3.14\t// 同时给多个同类型的变量赋值\tvar1, var2, var3 := 100, 200, 300\t// 同时给多个不同类型的变量赋值\tvar4, var5, var6 := 300, &quot;Golang&quot;, 3.14\t// golang中定义的变量必须使用, 否则会报错\tfmt.Println( variable1, variable2, variable3, variable4, variable5, variable6, variable7, variable8, variable9, variable10, variable11, variable12, variable13, variable14, variable15, var1, var2, var3, var4, var5, var6,\t)&#125; 流程控制流程控制有顺序, 条件和循环, 可以处理更多复杂逻辑 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package mainimport &quot;fmt&quot;func main() &#123;\ta := 100\tb := 100\t// 条件判断\t// if - else if - else\tif a &gt; b &#123; fmt.Println(&quot;a&gt;b&quot;)\t&#125; else if a == b &#123; fmt.Println(&quot;a=b&quot;)\t&#125; else &#123; fmt.Println(&quot;a&lt;b&quot;)\t&#125;\t// switch 判断多个\tswitch a &#123;\tcase 100: fmt.Println(&quot;100&quot;)\tcase 200: fmt.Println(&quot;200&quot;)\tcase 300: fmt.Println(&quot;300&quot;)\tdefault: // 如果上面的都不匹配, 就执行default fmt.Println(&quot;???&quot;)\t&#125;\t// 循环\t// 定义i为0, 循环条件是i&lt;5, 每次循环i+1\tfor i := 0; i &lt; 5; i++ &#123; // 循环五次 fmt.Println(i)\t&#125;\t// 运行看看和上一个的不同之处\tfor i := 0; i &lt; 5; i++ &#123; if i == 1 &#123; fmt.Println(&quot;跳出当前这次循环, 但是不打断&quot;) continue &#125; if i == 3 &#123; fmt.Println(&quot;跳出循环, 打断循环&quot;) break &#125; fmt.Println(i)\t&#125;\t// 另一种\ti := 1\tfor i &lt; 5 &#123; fmt.Println(i) i++\t&#125;&#125; 数据结构数组定义数组变量, 其实是定义一个指向一个内存地址的指针, 指针后面的连续空间用来存放数组的值 123456789101112131415161718192021222324252627282930313233343536373839404142434445package mainimport &quot;fmt&quot;func main() &#123;\t// 定义数组\tvar arr1 [3]string\t//arr2 := [3]string&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;\tarr2 := []string&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;\tarr3 := [...]int&#123;10, 20, 30, 40, 50&#125;\t// 1和3的位置赋值, 其他位置为默认值\tarr4 := [5]int&#123;1: 10, 3: 30&#125;\tfmt.Println(arr1, arr2, arr3, arr4)\t// 选取数组中的某段\tfmt.Println(arr3[:])\tfmt.Println(arr3[:3]) // 不包含3\tfmt.Println(arr3[1:3]) // 不包含3\t// 数组循环\ti := 0\tfor range arr3 &#123; fmt.Println(arr3[i]) i++\t&#125;\tfor i, v := range arr3 &#123; // i是索引, v是值 fmt.Println(i, v)\t&#125;\t// 如果不需要, 可以用_代替赋值\tfor _, v := range arr3 &#123; // i是索引, v是值 fmt.Println(v)\t&#125;\t// 复制数组\tarr5 := arr3 // 复制了值, 改变arr5, 不会改变arr3\tarr6 := &amp;arr3 // 复制了指针 (地址), 改变arr6, 也会影响arr3\t//arr5[1] = 50\tfmt.Println(arr5, arr3)\tarr6[1] = 60\tfmt.Println(arr6, arr3)&#125; 内置库多线程框架","tags":["golang"],"categories":["golang"]},{"title":"Using TipTap rich text editor with Next.js","path":"/2024/09/09/nextjs/nextjs-beginner-tiptap/en/","content":"tiptapTiptap is a headless wrapper around ProseMirror – a toolkit for building rich text WYSIWYG editors, which is already in use at many well-known companies such as New York Times, The Guardian or Atlassian.https://tiptap.dev/docs/editor/getting-started/overview Our blog system already has the capability to read MD files, but editing MD files requires an additional editor and aseparate directory to store them.Therefore, we have switched to using a database + TipTap rich text method to store our blog content. git repositoryThis chapter is part of the Next.js beginner course series. Check out the following Git repository and switch to theextra2 branch to view the code for this chapter. course-repositoryhttps://github.com/malred/hexo-blog-nextjs-course Install and configure TipTapSince there are many dependencies required, we will install the new dependencies by modifying the package.json file andthen running an install. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&#123; &quot;dependencies&quot;: &#123; &quot;@radix-ui/react-dropdown-menu&quot;: &quot;^2.1.1&quot;, &quot;@radix-ui/react-label&quot;: &quot;^2.1.0&quot;, &quot;@radix-ui/react-select&quot;: &quot;^2.1.1&quot;, &quot;@radix-ui/react-slot&quot;: &quot;^1.1.0&quot;, &quot;@radix-ui/react-toggle&quot;: &quot;^1.1.0&quot;, &quot;@tailwindcss/typography&quot;: &quot;^0.5.14&quot;, &quot;@tiptap/core&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-character-count&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-color&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-document&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-dropcursor&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-focus&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-heading&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-image&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-paragraph&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-subscript&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-superscript&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-text&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-text-align&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-text-style&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/pm&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/react&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/starter-kit&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/suggestion&quot;: &quot;^2.4.0&quot;, &quot;@types/node&quot;: &quot;^20&quot;, &quot;@types/react&quot;: &quot;^18&quot;, &quot;@types/react-dom&quot;: &quot;^18&quot;, &quot;class-variance-authority&quot;: &quot;^0.7.0&quot;, &quot;clsx&quot;: &quot;^2.1.1&quot;, &quot;@tiptap/extension-font-family&quot;: &quot;^3.0.0&quot;, &quot;@tiptap/extension-highlight&quot;: &quot;^2.6.6&quot;, &quot;@tiptap/extension-link&quot;: &quot;^3.0.0&quot;, &quot;@tiptap/extension-list-keymap&quot;: &quot;^3.0.0&quot;, &quot;@tiptap/extension-table&quot;: &quot;^2.6.6&quot;, &quot;@tiptap/extension-table-cell&quot;: &quot;^2.6.6&quot;, &quot;@tiptap/extension-table-header&quot;: &quot;^2.6.6&quot;, &quot;@tiptap/extension-table-row&quot;: &quot;^2.6.6&quot;, &quot;@tiptap/extension-task-item&quot;: &quot;^2.6.6&quot;, &quot;@tiptap/extension-task-list&quot;: &quot;^3.0.0&quot;, &quot;lowlight&quot;: &quot;^3.1.0&quot;, &quot;marked&quot;: &quot;^14.0.0&quot;, &quot;next&quot;: &quot;14.2.5&quot;, &quot;next-themes&quot;: &quot;^0.3.0&quot;, &quot;react&quot;: &quot;^18&quot;, &quot;react-dom&quot;: &quot;^18&quot;, &quot;tailwind-merge&quot;: &quot;^2.5.2&quot;, &quot;sass&quot;: &quot;^1.77.6&quot;, &quot;lucide-react&quot;: &quot;^0.400.0&quot; &#125;&#125; Among these dependencies, aside from TipTap, the others are for the component library. Page for writing articlesCreate a page for writing articles using TipTap. 12345- app - blog - [slug] - write - page.tsx code: jsx1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&#x27;use client&#x27;;import React, &#123;FormEvent, useState&#125; from &#x27;react&#x27;;import TipTap from &quot;@/components/TipTap&quot;;import &#123;Button&#125; from &quot;@/components/ui/button&quot;;const Page = (props) =&gt; &#123; // contents of the tiptap editor const [richText, setRichText] = useState(` descripte ddd &lt;p&gt;This is a basic example of implementing images. Drag to re-order.&lt;/p&gt; &lt;img src=&quot;https://placehold.co/800x400&quot; /&gt; &lt;img src=&quot;https://placehold.co/800x400/6A00F5/white&quot; /&gt; &lt;p&gt; The focus extension adds a class to the focused node only. That enables you to add a custom styling to just that node. By default, it’ll add &lt;code&gt;.has-focus&lt;/code&gt;, even to nested nodes. &lt;/p&gt; &lt;ul&gt; &lt;li&gt;Nested elements (like this list item) will be focused with the default setting of &lt;code&gt;mode: all&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Otherwise the whole list will get the focus class, even when just a single list item is selected.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; That’s a boring paragraph followed by a fenced code block: &lt;/p&gt; &lt;pre&gt;&lt;code&gt;for (var i=1; i &lt;= 20; i++)&#123; if (i % 15 == 0) console.log(&quot;FizzBuzz&quot;); else if (i % 3 == 0) console.log(&quot;Fizz&quot;); else if (i % 5 == 0) console.log(&quot;Buzz&quot;); else console.log(i);&#125;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt; Press Command/Ctrl + Enter to leave the fenced code block and continue typing in boring paragraphs. &lt;/p&gt;`) return ( &lt;div className=&#123;&#x27;m-12&#x27;&#125;&gt; &lt;form onSubmit=&#123;(e: FormEvent) =&gt; &#123; e.preventDefault() console.log(richText) &#125;&#125;&gt; &lt;h1 className=&#123;&#x27;font-bold mr-2 text-2xl&#x27;&#125;&gt;&#123;props.params.slug&#125;&lt;/h1&gt; &#123;/* tiptap editor */&#125; &lt;TipTap description=&#123;richText&#125; onChange=&#123;(text) =&gt; &#123; setRichText(text) &#125;&#125;/&gt; &lt;Button type=&#123;&#x27;submit&#x27;&#125; className=&#123;&#x27;my-4&#x27;&#125;&gt; Submit &lt;/Button&gt; &lt;/form&gt; &lt;/div&gt; );&#125;;export default Page; tiptap editorCreate a TipTap editor component. 123- app- components - TipTap.tsx jsxx27;use client&#x27;;import &#x27;./styled.scss&#x27;import &#123;EditorContent, ReactNodeViewRenderer, useEditor&#125; from &quot;@tiptap/react&quot;;import &#123;StarterKit&#125; from &quot;@tiptap/starter-kit&quot;;import Heading from &#x27;@tiptap/extension-heading&#x27;import BubbleToolbar from &quot;@/components/BubbleToolbar&quot;;import &#123;CharacterCount&#125; from &quot;@tiptap/extension-character-count&quot;;import &#123;Color&#125; from &#x27;@tiptap/extension-color&#x27;import Document from &#x27;@tiptap/extension-document&#x27;import Paragraph from &#x27;@tiptap/extension-paragraph&#x27;import Text from &#x27;@tiptap/extension-text&#x27;import TextStyle from &#x27;@tiptap/extension-text-style&#x27;import Dropcursor from &#x27;@tiptap/extension-dropcursor&#x27;import Image from &#x27;@tiptap/extension-image&#x27;import &#123;useEffect, useState&#125; from &quot;react&quot;;import FloatingToolbar from &quot;@/components/FloatingToolbar&quot;;// @tiptap-pro/extension-file-handler is not in the npm registry, or you have no permission to fetch it.// import FileHandler from &#x27;@tiptap-pro/extension-file-handler&#x27;import Focus from &#x27;@tiptap/extension-focus&#x27;import &#123;FontFamily&#125; from &quot;@tiptap/extension-font-family&quot;;import ListItem from &quot;@tiptap/extension-list-item&quot;;import BulletList from &quot;@tiptap/extension-bullet-list&quot;;import Code from &quot;@tiptap/extension-code&quot;;import ListKeymap from &#x27;@tiptap/extension-list-keymap&#x27;import Blockquote from &#x27;@tiptap/extension-blockquote&#x27;import HardBreak from &#x27;@tiptap/extension-hard-break&#x27;import HorizontalRule from &#x27;@tiptap/extension-horizontal-rule&#x27;import Highlight from &#x27;@tiptap/extension-highlight&#x27;import &#123;common, createLowlight&#125; from &#x27;lowlight&#x27;const lowlight = createLowlight(common)lowlight.highlight(&#x27;html&#x27;, &#x27;&quot;use strict&quot;;&#x27;)lowlight.highlight(&#x27;css&#x27;, &#x27;&quot;use strict&quot;;&#x27;)lowlight.highlight(&#x27;js&#x27;, &#x27;&quot;use strict&quot;;&#x27;)lowlight.highlight(&#x27;ts&#x27;, &#x27;&quot;use strict&quot;;&#x27;)import Table from &#x27;@tiptap/extension-table&#x27;import TableCell from &#x27;@tiptap/extension-table-cell&#x27;import TableHeader from &#x27;@tiptap/extension-table-header&#x27;import TableRow from &#x27;@tiptap/extension-table-row&#x27;import TaskItem from &#x27;@tiptap/extension-task-item&#x27;import TaskList from &#x27;@tiptap/extension-task-list&#x27;import Link from &#x27;@tiptap/extension-link&#x27;// import Highlight from &#x27;@tiptap/extension-highlight&#x27;import Subscript from &#x27;@tiptap/extension-subscript&#x27;import Superscript from &#x27;@tiptap/extension-superscript&#x27;import TextAlign from &#x27;@tiptap/extension-text-align&#x27;export default function TipTap(&#123; description, onChange &#125;: &#123; description: string onChange: (richText: string) =&gt; void&#125;) &#123; // Editor settings, such as which plugins to use, and what features are supported. const editor = useEditor(&#123; extensions: [ StarterKit.configure(&#123; // Disable an included extension history: false, // codeBlock: false, // code: false gapcursor: true &#125;), Heading, Document, Paragraph, Dropcursor, Text, TextStyle, Color, CharacterCount.configure(&#123; mode: &#x27;nodeSize&#x27;, &#125;), Focus.configure(&#123; className: &#x27;has-focus&#x27;, mode: &#x27;all&#x27;, &#125;), Code, BulletList, ListItem, FontFamily, ListKeymap, // CodeBlock, Blockquote, HardBreak, HorizontalRule, Highlight, Image.configure(&#123; allowBase64: true, inline: true, &#125;), Table.configure(&#123; // resizable: true, // allowTableNodeSelection: true &#125;), TableRow, TableHeader, TableCell, Text, TaskList, TaskItem.configure(&#123; // nested: true, HTMLAttributes: &#123; class: &#x27;list-none&#x27;, &#125;, &#125;), Link.configure(&#123; HTMLAttributes: &#123; class: &#x27;underline cursor-pointer text-blue-400&#x27;, &#125;, openOnClick: true, // linkOnPaste: true, autolink: true, defaultProtocol: &#x27;https&#x27;, &#125;), Highlight.configure(&#123;multicolor: true&#125;), Subscript, Superscript, TextAlign.configure(&#123; types: [&#x27;heading&#x27;, &#x27;paragraph&#x27;], &#125;), ], autofocus: true, content: description, editorProps: &#123; attributes: &#123; class: &#x27;p-2 rounded-md border min-h-[150px] border-input bg-back disabled:cursor-not-allowed disabled:opacity-50&#x27; &#125; &#125;, onUpdate(&#123;editor&#125;) &#123; onChange(editor.getHTML()) console.log(editor.getHTML()) &#125; &#125;) // 防止编辑器未加载时操作出错 const [isEditable, setIsEditable] = useState(true) useEffect(() =&gt; &#123; if (editor) &#123; editor.setEditable(isEditable) &#125; &#125;, [isEditable, editor]) return ( &lt;div className=&#123;&#x27; flex flex-col justify-stretch min-h-[250px] min-w-[250px]&#x27;&#125;&gt; &#123;/* bubble menu, It&#x27;s the floating toolbar that appears when you long-press and drag the mouse to select content. */&#125; &lt;BubbleToolbar editor=&#123;editor&#125;/&gt; &#123;/* The floating toolbar that automatically appears when you press enter to start a new line. */&#125; &lt;FloatingToolbar editor=&#123;editor&#125;/&gt; &#123;/* The toolbar at the top of the editor, which I originally didn&#x27;t want to implement, is mainly for using the table component. */&#125; &lt;div className=&quot;control-group flex flex-row flex-wrap gap-2 mb-2&quot;&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().insertTable(&#123;rows: 3, cols: 3, withHeaderRow: true&#125;).run() &#125; &gt; Insert table &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().addColumnBefore().run()&#125;&gt; Add column before &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().addColumnAfter().run()&#125;&gt;Add column after &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().deleteColumn().run()&#125;&gt;Delete column &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().addRowBefore().run()&#125;&gt;Add row before &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().addRowAfter().run()&#125;&gt;Add row after &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().deleteRow().run()&#125;&gt;Delete row &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().deleteTable().run()&#125;&gt;Delete table &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().mergeCells().run()&#125;&gt;Merge cells &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().splitCell().run()&#125;&gt;Split cell &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().toggleHeaderColumn().run()&#125;&gt; Toggle header column &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().toggleHeaderRow().run()&#125;&gt; Toggle header row &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().toggleHeaderCell().run()&#125;&gt; Toggle header cell &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().mergeOrSplit().run()&#125;&gt;Merge or split &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().setCellAttribute(&#x27;colspan&#x27;, 2).run()&#125;&gt; Set cell attribute &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().fixTables().run()&#125;&gt;Fix tables &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().goToNextCell().run()&#125;&gt;Go to next cell &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().goToPreviousCell().run()&#125;&gt; Go to previous cell &lt;/button&gt; &lt;/div&gt; &#123;/* editor content */&#125; &lt;EditorContent editor=&#123;editor&#125;/&gt; &#123;/* count of words */&#125; &lt;div className=&#123;`character-count `&#125;&gt; &lt;br/&gt; &#123;editor?.storage.characterCount.characters()&#125; characters &#123;&#x27; &#x27;&#125; &#123;editor?.storage.characterCount.words()&#125; words &lt;/div&gt; &lt;/div&gt; )&#125; menuBubbleToolbar123- app- components - BubbleToolbar.tsx BubbleToolbar, It’s the floating toolbar that appears when you long-press and drag the mouse to select content. jsxx27;use client&#x27;;import &#x27;./styled.scss&#x27;import &#123;BubbleMenu, type Editor&#125; from &quot;@tiptap/react&quot;;import &#123;Toggle&#125; from &#x27;./ui/toggle&#x27;import &#123; Heading, Heading2, Heading3, Heading4, Italic, List, Image, ListOrdered, LucideBold, Minus, Strikethrough, Superscript, Link2, Link2Off, Braces, Brackets, SquareCheck, Subscript, AlignJustify, AlignLeft, AlignRight, AlignCenter&#125; from &quot;lucide-react&quot;;import &#123;Select, SelectContent, SelectItem, SelectTrigger, SelectValue&#125; from &quot;@/components/ui/select&quot;;import &#123;useCallback&#125; from &quot;react&quot;;type Props = &#123; editor: Editor | null&#125;export default function BubbleToolbar(&#123;editor&#125;: Props) &#123; if (!editor) return null const addImage = useCallback(() =&gt; &#123; const url = window.prompt(&#x27;URL&#x27;) if (url) &#123; editor.chain().focus().setImage(&#123;src: url&#125;).run() &#125; &#125;, [editor]) const setLink = useCallback(() =&gt; &#123; const previousUrl = editor.getAttributes(&#x27;link&#x27;).href const url = window.prompt(&#x27;URL&#x27;, previousUrl) // cancelled if (url === null) &#123; return &#125; // empty if (url === &#x27;&#x27;) &#123; editor.chain().focus().extendMarkRange(&#x27;link&#x27;).unsetLink() .run() return &#125; // update link editor.chain().focus().extendMarkRange(&#x27;link&#x27;).setLink(&#123;href: url&#125;) .run() &#125;, [editor]) return ( &lt;BubbleMenu className=&#123;&#x27;w-fit shadow-md rounded-lg&#x27;&#125; editor=&#123;editor&#125; tippyOptions=&#123;&#123;duration: 100&#125;&#125;&gt; &lt;div className=&quot;bubble-menu flex-wrap rounded-lg&quot;&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;heading&#x27;, &#123;level: 1&#125;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleHeading(&#123;level: 1&#125;).run() &#125;&#125; &gt; &lt;Heading className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;heading&#x27;, &#123;level: 2&#125;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleHeading(&#123;level: 2&#125;).run() &#125;&#125; &gt; &lt;Heading2 className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;heading&#x27;, &#123;level: 3&#125;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleHeading(&#123;level: 3&#125;).run() &#125;&#125; &gt; &lt;Heading3 className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;heading&#x27;, &#123;level: 4&#125;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleHeading(&#123;level: 4&#125;).run() &#125;&#125; &gt; &lt;Heading4 className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;bold&#x27;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleBold().run() &#125;&#125; &gt; &lt;LucideBold className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;italic&#x27;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleItalic().run() &#125;&#125; &gt; &lt;Italic className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;strike&#x27;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleStrike().run() &#125;&#125; &gt; &lt;Strikethrough className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;bulletList&#x27;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleBulletList().run() &#125;&#125; &gt; &lt;List className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;orderedList&#x27;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleOrderedList().run() &#125;&#125; &gt; &lt;ListOrdered className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;div className=&#123;&#x27;inline-block mx-1&#x27;&#125;&gt; &lt;Select onValueChange=&#123;(value) =&gt; &#123; console.log(value) switch (value) &#123; case &#x27;Purple&#x27;: editor.chain().focus().setColor(&#x27;#958DF1&#x27;).run() break case &#x27;Red&#x27;: editor.chain().focus().setColor(&#x27;#F98181&#x27;).run() break case &#x27;Orange&#x27;: editor.chain().focus().setColor(&#x27;#FBBC88&#x27;).run() break case &#x27;Yellow&#x27;: editor.chain().focus().setColor(&#x27;#FAF594&#x27;).run() break case &#x27;Blue&#x27;: editor.chain().focus().setColor(&#x27;#70CFF8&#x27;).run() break case &#x27;Teal&#x27;: editor.chain().focus().setColor(&#x27;#94FADB&#x27;).run() break case &#x27;Green&#x27;: editor.chain().focus().setColor(&#x27;#B9F18D&#x27;).run() break case &#x27;Unset color&#x27;: editor.chain().focus().unsetColor().run() break &#125; &#125;&#125;&gt; &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt; &lt;SelectValue placeholder=&#123;&#x27;theme&#x27;&#125;/&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &#123;[ &#123; name: &#x27;Purple&#x27;, val: &#x27;#958DF1&#x27; &#125;, &#123; name: &#x27;Red&#x27;, val: &#x27;#F98181&#x27; &#125;, &#123; name: &#x27;Orange&#x27;, val: &#x27;#FBBC88&#x27; &#125;, &#123; name: &#x27;Yellow&#x27;, val: &#x27;#FAF594&#x27; &#125;, &#123; name: &#x27;Blue&#x27;, val: &#x27;#70CFF8&#x27; &#125;, &#123; name: &#x27;Teal&#x27;, val: &#x27;#94FADB&#x27; &#125;, &#123; name: &#x27;Green&#x27;, val: &#x27;#B9F18D&#x27; &#125;, &#123; name: &#x27;Unset color&#x27;, val: &#x27;&#x27; &#125; ].map((item) =&gt; ( &lt;SelectItem value=&#123;item.name&#125; data-testid=&#123;`set$&#123;item.name&#125;`&#125; style=&#123;&#123; color: item.val &#125;&#125; className=&#123; `bg-[$&#123;item.val&#125;] focus:bg-[$&#123;item.val&#125;] focus:brightness-125 $&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;color: item.val&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125;` &#125; // onClick=&#123;() =&gt; editor.chain().focus().setColor(item.val).run()&#125; &gt; &#123;item.name&#125; &lt;/SelectItem&gt; ))&#125; &lt;/SelectContent&gt; &lt;/Select&gt; &lt;/div&gt; &lt;div className=&#123;&#x27;inline-block mx-1&#x27;&#125;&gt; &lt;Select onValueChange=&#123;(value) =&gt; &#123; console.log(value) switch (value) &#123; case &#x27;Purple&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#958DF1&#x27;&#125;).run() break case &#x27;Red&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#F98181&#x27;&#125;).run() break case &#x27;Orange&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#ffc078&#x27;&#125;).run() break case &#x27;Yellow&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#FAF594&#x27;&#125;).run() break case &#x27;Blue&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#70CFF8&#x27;&#125;).run() break case &#x27;Teal&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#94FADB&#x27;&#125;).run() break case &#x27;Green&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#B9F18D&#x27;&#125;).run() break case &#x27;Unset color&#x27;: editor.chain().focus().unsetHighlight().run() break &#125; &#125;&#125;&gt; &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt; &lt;SelectValue placeholder=&#123;&#x27;highlight&#x27;&#125;/&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &#123;[ &#123; name: &#x27;Purple&#x27;, val: &#x27;#958DF1&#x27; &#125;, &#123; name: &#x27;Red&#x27;, val: &#x27;#F98181&#x27; &#125;, &#123; name: &#x27;Orange&#x27;, val: &#x27;#FBBC88&#x27; &#125;, &#123; name: &#x27;Yellow&#x27;, val: &#x27;#FAF594&#x27; &#125;, &#123; name: &#x27;Blue&#x27;, val: &#x27;#70CFF8&#x27; &#125;, &#123; name: &#x27;Teal&#x27;, val: &#x27;#94FADB&#x27; &#125;, &#123; name: &#x27;Green&#x27;, val: &#x27;#B9F18D&#x27; &#125;, &#123; name: &#x27;Unset color&#x27;, val: &#x27;&#x27; &#125; ].map((item, index) =&gt; ( &lt;SelectItem key=&#123;index&#125; value=&#123;item.name&#125; data-testid=&#123;`set$&#123;item.name&#125;`&#125; style=&#123;&#123; background: item.val &#125;&#125; className=&#123; `bg-[$&#123;item.val&#125;] focus:bg-[$&#123;item.val&#125;] focus:brightness-125 $&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;color: item.val&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125;` &#125; // onClick=&#123;() =&gt; editor.chain().focus().setColor(item.val).run()&#125; &gt; &#123;item.name&#125; &lt;/SelectItem&gt; ))&#125; &lt;/SelectContent&gt; &lt;/Select&gt; &lt;/div&gt; &lt;div className=&#123;&#x27;inline-block mx-1&#x27;&#125;&gt; &lt;Select onValueChange=&#123;(value) =&gt; &#123; switch (value) &#123; case &#x27;inter&#x27;: editor.chain().focus().setFontFamily(&#x27;Comic Sans MS, Comic Sans&#x27;).run() break case &#x27;comic-sans&#x27;: editor.chain().focus().setFontFamily(&#x27;Comic Sans MS, Comic Sans&#x27;).run() break case &#x27;serif&#x27;: editor.chain().focus().setFontFamily(&#x27;serif&#x27;).run() break case &#x27;monospace&#x27;: editor.chain().focus().setFontFamily(&#x27;monospace&#x27;).run() break case &#x27;cursive&#x27;: editor.chain().focus().setFontFamily(&#x27;cursive&#x27;).run() break case &#x27;css-variable&#x27;: editor.chain().focus().setFontFamily(&#x27;var(--title-font-family)&#x27;).run() break case &#x27;comic-sans-quoted&#x27;: editor.chain().focus().setFontFamily(&#x27;&quot;Comic Sans MS&quot;, &quot;Comic Sans&quot;&#x27;).run() break case &#x27;unsetFontFamily&#x27;: editor.chain().focus().unsetFontFamily().run() break &#125; &#125;&#125; &gt; &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt; &lt;SelectValue placeholder=&#123;&#x27;font family&#x27;&#125;/&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;Inter&#x27;).run()&#125; className=&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;Inter&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; data-test-id=&quot;inter&quot; value=&#123;&#x27;inter&#x27;&#125; &gt; Inter &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;Comic Sans MS, Comic Sans&#x27;).run() &#125; className=&#123; editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;Comic Sans MS, Comic Sans&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27; &#125; data-test-id=&quot;comic-sans&quot; value=&#123;&quot;comic-sans&quot;&#125; &gt; Comic Sans &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;serif&#x27;).run() &#125; className=&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;serif&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; data-test-id=&quot;serif&quot; value=&quot;serif&quot; &gt; Serif &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;monospace&#x27;).run() &#125; className=&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;monospace&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; data-test-id=&quot;monospace&quot; value=&quot;monospace&quot; &gt; Monospace &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;cursive&#x27;).run() &#125; className=&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;cursive&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; data-test-id=&quot;cursive&quot; value=&quot;cursive&quot; &gt; Cursive &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;var(--title-font-family)&#x27;).run() &#125; className=&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;var(--title-font-family)&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; data-test-id=&quot;css-variable&quot; value=&quot;css-variable&quot; &gt; CSS variable &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;&quot;Comic Sans MS&quot;, &quot;Comic Sans&quot;&#x27;).run() &#125; className=&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;&quot;Comic Sans&quot;&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; data-test-id=&quot;comic-sans-quoted&quot; value=&quot;comic-sans-quoted&quot; &gt; Comic Sans quoted &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().unsetFontFamily().run() &#125; data-test-id=&quot;unsetFontFamily&quot; value=&quot;unsetFontFamily&quot; &gt; Unset font family &lt;/SelectItem&gt; &lt;/SelectContent&gt; &lt;/Select&gt; &lt;/div&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().toggleCodeBlock().run()&#125; className=&#123;`$&#123;editor.isActive(&#x27;codeBlock&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125;`&#125; &gt; &lt;Braces className=&#123;&#x27;w-4 h-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &#123;/*&lt;Toggle*/&#125; &#123;/* onClick=&#123;() =&gt; editor.chain().focus().toggleCode().run()&#125;*/&#125; &#123;/* className=&#123;editor.isActive(&#x27;code&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125;*/&#125; &#123;/*&gt;*/&#125; &#123;/* &lt;ChevronsLeftRight className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt;*/&#125; &#123;/*&lt;/Toggle&gt;*/&#125; &#123;/*&lt;Toggle*/&#125; &#123;/* size=&#123;&#x27;sm&#x27;&#125;*/&#125; &#123;/* onClick=&#123;() =&gt; editor.chain().focus().setCodeBlock().run()&#125;*/&#125; &#123;/* disabled=&#123;editor.isActive(&#x27;codeBlock&#x27;)&#125;*/&#125; &#123;/* className=&#123;&#x27;inline&#x27;&#125;*/&#125; &#123;/*&gt;*/&#125; &#123;/* &lt;Braces className=&#123;&#x27;w-4 h-4&#x27;&#125; /&gt;*/&#125; &#123;/*&lt;/Toggle&gt;*/&#125; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().toggleBlockquote().run()&#125; className=&#123;`$&#123;editor.isActive(&#x27;blockquote&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125;`&#125; &gt; &lt;Brackets className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &#123;/*&lt;Toggle*/&#125; &#123;/* size=&#123;&#x27;sm&#x27;&#125;*/&#125; &#123;/* onClick=&#123;() =&gt; () =&gt; editor.chain().focus().setHardBreak().run()&#125;*/&#125; &#123;/*&gt;*/&#125; &#123;/* &lt;CornerDownLeft className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt;*/&#125; &#123;/*&lt;/Toggle&gt;*/&#125; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().setHorizontalRule().run()&#125; &gt; &lt;Minus className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Image onClick=&#123;addImage&#125; className=&#123;&#x27;m-2 cursor-pointer h-5 w-5&#x27;&#125;/&gt; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().toggleTaskList().run()&#125; className=&#123;editor.isActive(&#x27;taskList&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;SquareCheck className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &#123;/*链接*/&#125; &lt;Link2 onClick=&#123;setLink&#125; className=&#123;`h-5 w-5 m-2 cursor-pointer $&#123;editor.isActive(&#x27;link&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125;`&#125;/&gt; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().unsetLink().run()&#125; disabled=&#123;!editor.isActive(&#x27;link&#x27;)&#125; &gt; &lt;Link2Off className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &#123;/*上下标*/&#125; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().toggleSuperscript().run()&#125; className=&#123;editor.isActive(&#x27;superscript&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;Superscript className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().toggleSubscript().run()&#125; className=&#123;editor.isActive(&#x27;subscript&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;Subscript className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &#123;/*对齐*/&#125; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().setTextAlign(&#x27;left&#x27;).run()&#125; className=&#123;editor.isActive(&#123;textAlign: &#x27;left&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;AlignLeft className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().setTextAlign(&#x27;center&#x27;).run()&#125; className=&#123;editor.isActive(&#123;textAlign: &#x27;center&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;AlignCenter className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().setTextAlign(&#x27;right&#x27;).run()&#125; className=&#123;editor.isActive(&#123;textAlign: &#x27;right&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;AlignRight className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().setTextAlign(&#x27;justify&#x27;).run()&#125; className=&#123;editor.isActive(&#123;textAlign: &#x27;justify&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;AlignJustify className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;/div&gt; &lt;/BubbleMenu&gt; )&#125; FloatingToolbar123- app- components - FloatingToolbar.tsx FloatingToolbar, The floating toolbar that automatically appears when you press enter to start a new line. endvisit http://localhost:3000/blog/xxx/write Next, we will introduce Prisma to operate the database and store these rich texts in the database.","tags":["nextjs","frontend"],"categories":["nextjs","frontend"]},{"title":"nextjs使用tiptap富文本编辑器","path":"/2024/09/09/nextjs/nextjs-beginner-tiptap/zh-cn/","content":"tiptapTiptap是ProseMirror的一个无头封装，ProseMirror是一个用于构建富文本所见即所得编辑器的工具包https://tiptap.dev/docs/editor/getting-started/overview 我们的博客系统已经拥有了读取md文件的能力, 但是md文件需要额外的编辑器来编辑, 并且需要额外的目录来存放md文件,所以我们改为使用数据库+tiptap富文本的方式来存储我们的博客 git仓库本章是nextjs入门课程系列的一部分, 查看以下git仓库, 并切换到extra2分支, 可查看本章代码 course-repositoryhttps://github.com/malred/hexo-blog-nextjs-course 安装配置tiptap因为需要的依赖比较多, 所以我们用修改package.json然后install的方式来安装新的依赖 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&#123; &quot;dependencies&quot;: &#123; &quot;@radix-ui/react-dropdown-menu&quot;: &quot;^2.1.1&quot;, &quot;@radix-ui/react-label&quot;: &quot;^2.1.0&quot;, &quot;@radix-ui/react-select&quot;: &quot;^2.1.1&quot;, &quot;@radix-ui/react-slot&quot;: &quot;^1.1.0&quot;, &quot;@radix-ui/react-toggle&quot;: &quot;^1.1.0&quot;, &quot;@tailwindcss/typography&quot;: &quot;^0.5.14&quot;, &quot;@tiptap/core&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-character-count&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-color&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-document&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-dropcursor&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-focus&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-heading&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-image&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-paragraph&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-subscript&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-superscript&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-text&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-text-align&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/extension-text-style&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/pm&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/react&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/starter-kit&quot;: &quot;^2.4.0&quot;, &quot;@tiptap/suggestion&quot;: &quot;^2.4.0&quot;, &quot;@types/node&quot;: &quot;^20&quot;, &quot;@types/react&quot;: &quot;^18&quot;, &quot;@types/react-dom&quot;: &quot;^18&quot;, &quot;class-variance-authority&quot;: &quot;^0.7.0&quot;, &quot;clsx&quot;: &quot;^2.1.1&quot;, &quot;@tiptap/extension-font-family&quot;: &quot;^3.0.0&quot;, &quot;@tiptap/extension-highlight&quot;: &quot;^2.6.6&quot;, &quot;@tiptap/extension-link&quot;: &quot;^3.0.0&quot;, &quot;@tiptap/extension-list-keymap&quot;: &quot;^3.0.0&quot;, &quot;@tiptap/extension-table&quot;: &quot;^2.6.6&quot;, &quot;@tiptap/extension-table-cell&quot;: &quot;^2.6.6&quot;, &quot;@tiptap/extension-table-header&quot;: &quot;^2.6.6&quot;, &quot;@tiptap/extension-table-row&quot;: &quot;^2.6.6&quot;, &quot;@tiptap/extension-task-item&quot;: &quot;^2.6.6&quot;, &quot;@tiptap/extension-task-list&quot;: &quot;^3.0.0&quot;, &quot;lowlight&quot;: &quot;^3.1.0&quot;, &quot;marked&quot;: &quot;^14.0.0&quot;, &quot;next&quot;: &quot;14.2.5&quot;, &quot;next-themes&quot;: &quot;^0.3.0&quot;, &quot;react&quot;: &quot;^18&quot;, &quot;react-dom&quot;: &quot;^18&quot;, &quot;tailwind-merge&quot;: &quot;^2.5.2&quot;, &quot;sass&quot;: &quot;^1.77.6&quot;, &quot;lucide-react&quot;: &quot;^0.400.0&quot; &#125;&#125; 这里面除了tiptap外的依赖是组件库的依赖 编写文章的页面创建一个用tiptap来编写文章的页面 12345- app - blog - [slug] - write - page.tsx 页面代码: jsx1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&#x27;use client&#x27;;import React, &#123;FormEvent, useState&#125; from &#x27;react&#x27;;import TipTap from &quot;@/components/TipTap&quot;;import &#123;Button&#125; from &quot;@/components/ui/button&quot;;const Page = (props) =&gt; &#123; // tiptap编辑器中的内容 const [richText, setRichText] = useState(` descripte ddd &lt;p&gt;This is a basic example of implementing images. Drag to re-order.&lt;/p&gt; &lt;img src=&quot;https://placehold.co/800x400&quot; /&gt; &lt;img src=&quot;https://placehold.co/800x400/6A00F5/white&quot; /&gt; &lt;p&gt; The focus extension adds a class to the focused node only. That enables you to add a custom styling to just that node. By default, it’ll add &lt;code&gt;.has-focus&lt;/code&gt;, even to nested nodes. &lt;/p&gt; &lt;ul&gt; &lt;li&gt;Nested elements (like this list item) will be focused with the default setting of &lt;code&gt;mode: all&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Otherwise the whole list will get the focus class, even when just a single list item is selected.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; That’s a boring paragraph followed by a fenced code block: &lt;/p&gt; &lt;pre&gt;&lt;code&gt;for (var i=1; i &lt;= 20; i++)&#123; if (i % 15 == 0) console.log(&quot;FizzBuzz&quot;); else if (i % 3 == 0) console.log(&quot;Fizz&quot;); else if (i % 5 == 0) console.log(&quot;Buzz&quot;); else console.log(i);&#125;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt; Press Command/Ctrl + Enter to leave the fenced code block and continue typing in boring paragraphs. &lt;/p&gt;`) return ( &lt;div className=&#123;&#x27;m-12&#x27;&#125;&gt; &lt;form onSubmit=&#123;(e: FormEvent) =&gt; &#123; e.preventDefault() console.log(richText) &#125;&#125;&gt; &lt;h1 className=&#123;&#x27;font-bold mr-2 text-2xl&#x27;&#125;&gt;&#123;props.params.slug&#125;&lt;/h1&gt; &#123;/* tiptap编辑器 */&#125; &lt;TipTap description=&#123;richText&#125; onChange=&#123;(text) =&gt; &#123; setRichText(text) &#125;&#125;/&gt; &lt;Button type=&#123;&#x27;submit&#x27;&#125; className=&#123;&#x27;my-4&#x27;&#125;&gt; Submit &lt;/Button&gt; &lt;/form&gt; &lt;/div&gt; );&#125;;export default Page; tiptap编辑器创建tiptap编辑器组件 123- app- components - TipTap.tsx jsxx27;use client&#x27;;import &#x27;./styled.scss&#x27;import &#123;EditorContent, ReactNodeViewRenderer, useEditor&#125; from &quot;@tiptap/react&quot;;import &#123;StarterKit&#125; from &quot;@tiptap/starter-kit&quot;;import Heading from &#x27;@tiptap/extension-heading&#x27;import BubbleToolbar from &quot;@/components/BubbleToolbar&quot;;import &#123;CharacterCount&#125; from &quot;@tiptap/extension-character-count&quot;;import &#123;Color&#125; from &#x27;@tiptap/extension-color&#x27;import Document from &#x27;@tiptap/extension-document&#x27;import Paragraph from &#x27;@tiptap/extension-paragraph&#x27;import Text from &#x27;@tiptap/extension-text&#x27;import TextStyle from &#x27;@tiptap/extension-text-style&#x27;import Dropcursor from &#x27;@tiptap/extension-dropcursor&#x27;import Image from &#x27;@tiptap/extension-image&#x27;import &#123;useEffect, useState&#125; from &quot;react&quot;;import FloatingToolbar from &quot;@/components/FloatingToolbar&quot;;// @tiptap-pro/extension-file-handler is not in the npm registry, or you have no permission to fetch it.// import FileHandler from &#x27;@tiptap-pro/extension-file-handler&#x27;import Focus from &#x27;@tiptap/extension-focus&#x27;import &#123;FontFamily&#125; from &quot;@tiptap/extension-font-family&quot;;import ListItem from &quot;@tiptap/extension-list-item&quot;;import BulletList from &quot;@tiptap/extension-bullet-list&quot;;import Code from &quot;@tiptap/extension-code&quot;;import ListKeymap from &#x27;@tiptap/extension-list-keymap&#x27;import Blockquote from &#x27;@tiptap/extension-blockquote&#x27;import HardBreak from &#x27;@tiptap/extension-hard-break&#x27;import HorizontalRule from &#x27;@tiptap/extension-horizontal-rule&#x27;import Highlight from &#x27;@tiptap/extension-highlight&#x27;import &#123;common, createLowlight&#125; from &#x27;lowlight&#x27;const lowlight = createLowlight(common)lowlight.highlight(&#x27;html&#x27;, &#x27;&quot;use strict&quot;;&#x27;)lowlight.highlight(&#x27;css&#x27;, &#x27;&quot;use strict&quot;;&#x27;)lowlight.highlight(&#x27;js&#x27;, &#x27;&quot;use strict&quot;;&#x27;)lowlight.highlight(&#x27;ts&#x27;, &#x27;&quot;use strict&quot;;&#x27;)import Table from &#x27;@tiptap/extension-table&#x27;import TableCell from &#x27;@tiptap/extension-table-cell&#x27;import TableHeader from &#x27;@tiptap/extension-table-header&#x27;import TableRow from &#x27;@tiptap/extension-table-row&#x27;import TaskItem from &#x27;@tiptap/extension-task-item&#x27;import TaskList from &#x27;@tiptap/extension-task-list&#x27;import Link from &#x27;@tiptap/extension-link&#x27;// import Highlight from &#x27;@tiptap/extension-highlight&#x27;import Subscript from &#x27;@tiptap/extension-subscript&#x27;import Superscript from &#x27;@tiptap/extension-superscript&#x27;import TextAlign from &#x27;@tiptap/extension-text-align&#x27;export default function TipTap(&#123; description, onChange &#125;: &#123; description: string onChange: (richText: string) =&gt; void&#125;) &#123; // 编辑器设置, 比如使用哪些插件, 支持哪些功能 const editor = useEditor(&#123; extensions: [ StarterKit.configure(&#123; // Disable an included extension history: false, // codeBlock: false, // code: false gapcursor: true &#125;), Heading, Document, Paragraph, Dropcursor, Text, TextStyle, Color, CharacterCount.configure(&#123; mode: &#x27;nodeSize&#x27;, &#125;), Focus.configure(&#123; className: &#x27;has-focus&#x27;, mode: &#x27;all&#x27;, &#125;), Code, BulletList, ListItem, FontFamily, ListKeymap, // CodeBlock, Blockquote, HardBreak, HorizontalRule, Highlight, Image.configure(&#123; allowBase64: true, inline: true, &#125;), Table.configure(&#123; // resizable: true, // allowTableNodeSelection: true &#125;), TableRow, TableHeader, TableCell, Text, TaskList, TaskItem.configure(&#123; // nested: true, HTMLAttributes: &#123; class: &#x27;list-none&#x27;, &#125;, &#125;), Link.configure(&#123; HTMLAttributes: &#123; class: &#x27;underline cursor-pointer text-blue-400&#x27;, &#125;, openOnClick: true, // linkOnPaste: true, autolink: true, defaultProtocol: &#x27;https&#x27;, &#125;), Highlight.configure(&#123;multicolor: true&#125;), Subscript, Superscript, TextAlign.configure(&#123; types: [&#x27;heading&#x27;, &#x27;paragraph&#x27;], &#125;), ], autofocus: true, content: description, editorProps: &#123; attributes: &#123; class: &#x27;p-2 rounded-md border min-h-[150px] border-input bg-back disabled:cursor-not-allowed disabled:opacity-50&#x27; &#125; &#125;, onUpdate(&#123;editor&#125;) &#123; onChange(editor.getHTML()) console.log(editor.getHTML()) &#125; &#125;) // 防止编辑器未加载时操作出错 const [isEditable, setIsEditable] = useState(true) useEffect(() =&gt; &#123; if (editor) &#123; editor.setEditable(isEditable) &#125; &#125;, [isEditable, editor]) return ( &lt;div className=&#123;&#x27; flex flex-col justify-stretch min-h-[250px] min-w-[250px]&#x27;&#125;&gt; &#123;/* bubble menu, 就是长按拖动鼠标选中内容后会弹出的悬浮工具条 */&#125; &lt;BubbleToolbar editor=&#123;editor&#125;/&gt; &#123;/* 回车到新行时会自动出现的浮动工具条 */&#125; &lt;FloatingToolbar editor=&#123;editor&#125;/&gt; &#123;/* 编辑器顶部的工具条, 本来我是不想搞的, 这里主要是为了使用table组件 */&#125; &lt;div className=&quot;control-group flex flex-row flex-wrap gap-2 mb-2&quot;&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().insertTable(&#123;rows: 3, cols: 3, withHeaderRow: true&#125;).run() &#125; &gt; Insert table &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().addColumnBefore().run()&#125;&gt; Add column before &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().addColumnAfter().run()&#125;&gt;Add column after &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().deleteColumn().run()&#125;&gt;Delete column &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().addRowBefore().run()&#125;&gt;Add row before &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().addRowAfter().run()&#125;&gt;Add row after &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().deleteRow().run()&#125;&gt;Delete row &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().deleteTable().run()&#125;&gt;Delete table &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().mergeCells().run()&#125;&gt;Merge cells &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().splitCell().run()&#125;&gt;Split cell &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().toggleHeaderColumn().run()&#125;&gt; Toggle header column &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().toggleHeaderRow().run()&#125;&gt; Toggle header row &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().toggleHeaderCell().run()&#125;&gt; Toggle header cell &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().mergeOrSplit().run()&#125;&gt;Merge or split &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().setCellAttribute(&#x27;colspan&#x27;, 2).run()&#125;&gt; Set cell attribute &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().fixTables().run()&#125;&gt;Fix tables &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().goToNextCell().run()&#125;&gt;Go to next cell &lt;/button&gt; &lt;button className=&#123;&#x27;p-1 bg-blue-200 rounded-md&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().goToPreviousCell().run()&#125;&gt; Go to previous cell &lt;/button&gt; &lt;/div&gt; &#123;/* 编辑器内容 */&#125; &lt;EditorContent editor=&#123;editor&#125;/&gt; &#123;/* 底部字数统计 */&#125; &lt;div className=&#123;`character-count `&#125;&gt; &lt;br/&gt; &#123;editor?.storage.characterCount.characters()&#125; characters &#123;&#x27; &#x27;&#125; &#123;editor?.storage.characterCount.words()&#125; words &lt;/div&gt; &lt;/div&gt; )&#125; menuBubbleToolbar123- app- components - BubbleToolbar.tsx BubbleToolbar就是长按拖动鼠标选中内容后会弹出的悬浮工具条 jsxx27;use client&#x27;;import &#x27;./styled.scss&#x27;import &#123;BubbleMenu, type Editor&#125; from &quot;@tiptap/react&quot;;import &#123;Toggle&#125; from &#x27;./ui/toggle&#x27;import &#123; Heading, Heading2, Heading3, Heading4, Italic, List, Image, ListOrdered, LucideBold, Minus, Strikethrough, Superscript, Link2, Link2Off, Braces, Brackets, SquareCheck, Subscript, AlignJustify, AlignLeft, AlignRight, AlignCenter&#125; from &quot;lucide-react&quot;;import &#123;Select, SelectContent, SelectItem, SelectTrigger, SelectValue&#125; from &quot;@/components/ui/select&quot;;import &#123;useCallback&#125; from &quot;react&quot;;type Props = &#123; editor: Editor | null&#125;export default function BubbleToolbar(&#123;editor&#125;: Props) &#123; if (!editor) return null const addImage = useCallback(() =&gt; &#123; const url = window.prompt(&#x27;URL&#x27;) if (url) &#123; editor.chain().focus().setImage(&#123;src: url&#125;).run() &#125; &#125;, [editor]) const setLink = useCallback(() =&gt; &#123; const previousUrl = editor.getAttributes(&#x27;link&#x27;).href const url = window.prompt(&#x27;URL&#x27;, previousUrl) // cancelled if (url === null) &#123; return &#125; // empty if (url === &#x27;&#x27;) &#123; editor.chain().focus().extendMarkRange(&#x27;link&#x27;).unsetLink() .run() return &#125; // update link editor.chain().focus().extendMarkRange(&#x27;link&#x27;).setLink(&#123;href: url&#125;) .run() &#125;, [editor]) return ( &lt;BubbleMenu className=&#123;&#x27;w-fit shadow-md rounded-lg&#x27;&#125; editor=&#123;editor&#125; tippyOptions=&#123;&#123;duration: 100&#125;&#125;&gt; &lt;div className=&quot;bubble-menu flex-wrap rounded-lg&quot;&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;heading&#x27;, &#123;level: 1&#125;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleHeading(&#123;level: 1&#125;).run() &#125;&#125; &gt; &lt;Heading className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;heading&#x27;, &#123;level: 2&#125;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleHeading(&#123;level: 2&#125;).run() &#125;&#125; &gt; &lt;Heading2 className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;heading&#x27;, &#123;level: 3&#125;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleHeading(&#123;level: 3&#125;).run() &#125;&#125; &gt; &lt;Heading3 className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;heading&#x27;, &#123;level: 4&#125;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleHeading(&#123;level: 4&#125;).run() &#125;&#125; &gt; &lt;Heading4 className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;bold&#x27;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleBold().run() &#125;&#125; &gt; &lt;LucideBold className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;italic&#x27;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleItalic().run() &#125;&#125; &gt; &lt;Italic className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;strike&#x27;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleStrike().run() &#125;&#125; &gt; &lt;Strikethrough className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;bulletList&#x27;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleBulletList().run() &#125;&#125; &gt; &lt;List className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; pressed=&#123;editor.isActive(&#x27;orderedList&#x27;)&#125; onPressedChange=&#123;() =&gt; &#123; editor.chain().focus().toggleOrderedList().run() &#125;&#125; &gt; &lt;ListOrdered className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;div className=&#123;&#x27;inline-block mx-1&#x27;&#125;&gt; &lt;Select onValueChange=&#123;(value) =&gt; &#123; console.log(value) switch (value) &#123; case &#x27;Purple&#x27;: editor.chain().focus().setColor(&#x27;#958DF1&#x27;).run() break case &#x27;Red&#x27;: editor.chain().focus().setColor(&#x27;#F98181&#x27;).run() break case &#x27;Orange&#x27;: editor.chain().focus().setColor(&#x27;#FBBC88&#x27;).run() break case &#x27;Yellow&#x27;: editor.chain().focus().setColor(&#x27;#FAF594&#x27;).run() break case &#x27;Blue&#x27;: editor.chain().focus().setColor(&#x27;#70CFF8&#x27;).run() break case &#x27;Teal&#x27;: editor.chain().focus().setColor(&#x27;#94FADB&#x27;).run() break case &#x27;Green&#x27;: editor.chain().focus().setColor(&#x27;#B9F18D&#x27;).run() break case &#x27;Unset color&#x27;: editor.chain().focus().unsetColor().run() break &#125; &#125;&#125;&gt; &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt; &lt;SelectValue placeholder=&#123;&#x27;theme&#x27;&#125;/&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &#123;[ &#123; name: &#x27;Purple&#x27;, val: &#x27;#958DF1&#x27; &#125;, &#123; name: &#x27;Red&#x27;, val: &#x27;#F98181&#x27; &#125;, &#123; name: &#x27;Orange&#x27;, val: &#x27;#FBBC88&#x27; &#125;, &#123; name: &#x27;Yellow&#x27;, val: &#x27;#FAF594&#x27; &#125;, &#123; name: &#x27;Blue&#x27;, val: &#x27;#70CFF8&#x27; &#125;, &#123; name: &#x27;Teal&#x27;, val: &#x27;#94FADB&#x27; &#125;, &#123; name: &#x27;Green&#x27;, val: &#x27;#B9F18D&#x27; &#125;, &#123; name: &#x27;Unset color&#x27;, val: &#x27;&#x27; &#125; ].map((item) =&gt; ( &lt;SelectItem value=&#123;item.name&#125; data-testid=&#123;`set$&#123;item.name&#125;`&#125; style=&#123;&#123; color: item.val &#125;&#125; className=&#123; `bg-[$&#123;item.val&#125;] focus:bg-[$&#123;item.val&#125;] focus:brightness-125 $&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;color: item.val&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125;` &#125; // onClick=&#123;() =&gt; editor.chain().focus().setColor(item.val).run()&#125; &gt; &#123;item.name&#125; &lt;/SelectItem&gt; ))&#125; &lt;/SelectContent&gt; &lt;/Select&gt; &lt;/div&gt; &lt;div className=&#123;&#x27;inline-block mx-1&#x27;&#125;&gt; &lt;Select onValueChange=&#123;(value) =&gt; &#123; console.log(value) switch (value) &#123; case &#x27;Purple&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#958DF1&#x27;&#125;).run() break case &#x27;Red&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#F98181&#x27;&#125;).run() break case &#x27;Orange&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#ffc078&#x27;&#125;).run() break case &#x27;Yellow&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#FAF594&#x27;&#125;).run() break case &#x27;Blue&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#70CFF8&#x27;&#125;).run() break case &#x27;Teal&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#94FADB&#x27;&#125;).run() break case &#x27;Green&#x27;: editor.chain().focus().toggleHighlight(&#123;color: &#x27;#B9F18D&#x27;&#125;).run() break case &#x27;Unset color&#x27;: editor.chain().focus().unsetHighlight().run() break &#125; &#125;&#125;&gt; &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt; &lt;SelectValue placeholder=&#123;&#x27;highlight&#x27;&#125;/&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &#123;[ &#123; name: &#x27;Purple&#x27;, val: &#x27;#958DF1&#x27; &#125;, &#123; name: &#x27;Red&#x27;, val: &#x27;#F98181&#x27; &#125;, &#123; name: &#x27;Orange&#x27;, val: &#x27;#FBBC88&#x27; &#125;, &#123; name: &#x27;Yellow&#x27;, val: &#x27;#FAF594&#x27; &#125;, &#123; name: &#x27;Blue&#x27;, val: &#x27;#70CFF8&#x27; &#125;, &#123; name: &#x27;Teal&#x27;, val: &#x27;#94FADB&#x27; &#125;, &#123; name: &#x27;Green&#x27;, val: &#x27;#B9F18D&#x27; &#125;, &#123; name: &#x27;Unset color&#x27;, val: &#x27;&#x27; &#125; ].map((item, index) =&gt; ( &lt;SelectItem key=&#123;index&#125; value=&#123;item.name&#125; data-testid=&#123;`set$&#123;item.name&#125;`&#125; style=&#123;&#123; background: item.val &#125;&#125; className=&#123; `bg-[$&#123;item.val&#125;] focus:bg-[$&#123;item.val&#125;] focus:brightness-125 $&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;color: item.val&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125;` &#125; // onClick=&#123;() =&gt; editor.chain().focus().setColor(item.val).run()&#125; &gt; &#123;item.name&#125; &lt;/SelectItem&gt; ))&#125; &lt;/SelectContent&gt; &lt;/Select&gt; &lt;/div&gt; &lt;div className=&#123;&#x27;inline-block mx-1&#x27;&#125;&gt; &lt;Select onValueChange=&#123;(value) =&gt; &#123; switch (value) &#123; case &#x27;inter&#x27;: editor.chain().focus().setFontFamily(&#x27;Comic Sans MS, Comic Sans&#x27;).run() break case &#x27;comic-sans&#x27;: editor.chain().focus().setFontFamily(&#x27;Comic Sans MS, Comic Sans&#x27;).run() break case &#x27;serif&#x27;: editor.chain().focus().setFontFamily(&#x27;serif&#x27;).run() break case &#x27;monospace&#x27;: editor.chain().focus().setFontFamily(&#x27;monospace&#x27;).run() break case &#x27;cursive&#x27;: editor.chain().focus().setFontFamily(&#x27;cursive&#x27;).run() break case &#x27;css-variable&#x27;: editor.chain().focus().setFontFamily(&#x27;var(--title-font-family)&#x27;).run() break case &#x27;comic-sans-quoted&#x27;: editor.chain().focus().setFontFamily(&#x27;&quot;Comic Sans MS&quot;, &quot;Comic Sans&quot;&#x27;).run() break case &#x27;unsetFontFamily&#x27;: editor.chain().focus().unsetFontFamily().run() break &#125; &#125;&#125; &gt; &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt; &lt;SelectValue placeholder=&#123;&#x27;font family&#x27;&#125;/&gt; &lt;/SelectTrigger&gt; &lt;SelectContent&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;Inter&#x27;).run()&#125; className=&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;Inter&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; data-test-id=&quot;inter&quot; value=&#123;&#x27;inter&#x27;&#125; &gt; Inter &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;Comic Sans MS, Comic Sans&#x27;).run() &#125; className=&#123; editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;Comic Sans MS, Comic Sans&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27; &#125; data-test-id=&quot;comic-sans&quot; value=&#123;&quot;comic-sans&quot;&#125; &gt; Comic Sans &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;serif&#x27;).run() &#125; className=&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;serif&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; data-test-id=&quot;serif&quot; value=&quot;serif&quot; &gt; Serif &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;monospace&#x27;).run() &#125; className=&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;monospace&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; data-test-id=&quot;monospace&quot; value=&quot;monospace&quot; &gt; Monospace &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;cursive&#x27;).run() &#125; className=&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;cursive&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; data-test-id=&quot;cursive&quot; value=&quot;cursive&quot; &gt; Cursive &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;var(--title-font-family)&#x27;).run() &#125; className=&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;var(--title-font-family)&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; data-test-id=&quot;css-variable&quot; value=&quot;css-variable&quot; &gt; CSS variable &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().setFontFamily(&#x27;&quot;Comic Sans MS&quot;, &quot;Comic Sans&quot;&#x27;).run() &#125; className=&#123;editor.isActive(&#x27;textStyle&#x27;, &#123;fontFamily: &#x27;&quot;Comic Sans&quot;&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; data-test-id=&quot;comic-sans-quoted&quot; value=&quot;comic-sans-quoted&quot; &gt; Comic Sans quoted &lt;/SelectItem&gt; &lt;SelectItem onClick=&#123;() =&gt; editor.chain().focus().unsetFontFamily().run() &#125; data-test-id=&quot;unsetFontFamily&quot; value=&quot;unsetFontFamily&quot; &gt; Unset font family &lt;/SelectItem&gt; &lt;/SelectContent&gt; &lt;/Select&gt; &lt;/div&gt; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().toggleCodeBlock().run()&#125; className=&#123;`$&#123;editor.isActive(&#x27;codeBlock&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125;`&#125; &gt; &lt;Braces className=&#123;&#x27;w-4 h-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &#123;/*&lt;Toggle*/&#125; &#123;/* onClick=&#123;() =&gt; editor.chain().focus().toggleCode().run()&#125;*/&#125; &#123;/* className=&#123;editor.isActive(&#x27;code&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125;*/&#125; &#123;/*&gt;*/&#125; &#123;/* &lt;ChevronsLeftRight className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt;*/&#125; &#123;/*&lt;/Toggle&gt;*/&#125; &#123;/*&lt;Toggle*/&#125; &#123;/* size=&#123;&#x27;sm&#x27;&#125;*/&#125; &#123;/* onClick=&#123;() =&gt; editor.chain().focus().setCodeBlock().run()&#125;*/&#125; &#123;/* disabled=&#123;editor.isActive(&#x27;codeBlock&#x27;)&#125;*/&#125; &#123;/* className=&#123;&#x27;inline&#x27;&#125;*/&#125; &#123;/*&gt;*/&#125; &#123;/* &lt;Braces className=&#123;&#x27;w-4 h-4&#x27;&#125; /&gt;*/&#125; &#123;/*&lt;/Toggle&gt;*/&#125; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().toggleBlockquote().run()&#125; className=&#123;`$&#123;editor.isActive(&#x27;blockquote&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125;`&#125; &gt; &lt;Brackets className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &#123;/*&lt;Toggle*/&#125; &#123;/* size=&#123;&#x27;sm&#x27;&#125;*/&#125; &#123;/* onClick=&#123;() =&gt; () =&gt; editor.chain().focus().setHardBreak().run()&#125;*/&#125; &#123;/*&gt;*/&#125; &#123;/* &lt;CornerDownLeft className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt;*/&#125; &#123;/*&lt;/Toggle&gt;*/&#125; &lt;Toggle size=&#123;&#x27;sm&#x27;&#125; onClick=&#123;() =&gt; editor.chain().focus().setHorizontalRule().run()&#125; &gt; &lt;Minus className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Image onClick=&#123;addImage&#125; className=&#123;&#x27;m-2 cursor-pointer h-5 w-5&#x27;&#125;/&gt; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().toggleTaskList().run()&#125; className=&#123;editor.isActive(&#x27;taskList&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;SquareCheck className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &#123;/*链接*/&#125; &lt;Link2 onClick=&#123;setLink&#125; className=&#123;`h-5 w-5 m-2 cursor-pointer $&#123;editor.isActive(&#x27;link&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125;`&#125;/&gt; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().unsetLink().run()&#125; disabled=&#123;!editor.isActive(&#x27;link&#x27;)&#125; &gt; &lt;Link2Off className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &#123;/*上下标*/&#125; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().toggleSuperscript().run()&#125; className=&#123;editor.isActive(&#x27;superscript&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;Superscript className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().toggleSubscript().run()&#125; className=&#123;editor.isActive(&#x27;subscript&#x27;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;Subscript className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &#123;/*对齐*/&#125; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().setTextAlign(&#x27;left&#x27;).run()&#125; className=&#123;editor.isActive(&#123;textAlign: &#x27;left&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;AlignLeft className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().setTextAlign(&#x27;center&#x27;).run()&#125; className=&#123;editor.isActive(&#123;textAlign: &#x27;center&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;AlignCenter className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().setTextAlign(&#x27;right&#x27;).run()&#125; className=&#123;editor.isActive(&#123;textAlign: &#x27;right&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;AlignRight className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;Toggle onClick=&#123;() =&gt; editor.chain().focus().setTextAlign(&#x27;justify&#x27;).run()&#125; className=&#123;editor.isActive(&#123;textAlign: &#x27;justify&#x27;&#125;) ? &#x27;is-active&#x27; : &#x27;&#x27;&#125; &gt; &lt;AlignJustify className=&#123;&#x27;h-4 w-4&#x27;&#125;/&gt; &lt;/Toggle&gt; &lt;/div&gt; &lt;/BubbleMenu&gt; )&#125; FloatingToolbar123- app- components - FloatingToolbar.tsx FloatingToolbar就是回车到新行时会自动出现的浮动工具条 完成访问 http://localhost:3000/blog/xxx/write 下一步, 我们将引入prisma来操作数据库, 将这些富文本存入数据库中","tags":["nextjs","frontend"],"categories":["nextjs","frontend"]},{"title":"什么是AI - 科普","path":"/2024/08/29/ai/what-is-AI/zh-cn/","content":"AI - 人工智能关于人工智能的定义, 光是在网络上搜索就有至少5种, 我的看法是, 人工智能就是通过机器学习算法, 在丰富的大量的数据集上进行训练学习,从而让机器能够处理各种复杂任务, 表现出和人相似的”智能”. google cloud上的说明https://cloud.google.com/learn/what-is-artificial-intelligence?hl=zh-CN 我将介绍 感知机, 前馈神经网络(FNN), 卷积神经网络(CNN), 循环神经网络(RNN), 长短期记忆(LSTM),并介绍神经网络基本的学习训练的流程和原理, 使用pytorch进行代码演示 数据集假设我们的神经网络是y&#x3D;f(x)这样的函数,那么数据集就是存储了许多组历史数据的文件,其中每一组数据包含输入到函数中的特征属性值(x),和这些x对应的目标属性值(y), 通过将这些数据放入神经网络, 神经网络从数据中提取出某种模式, 从而可以泛化到新数据上,也就是说, 可以通过学习历史数据, 来获得可以预测目标值的能力. (这实际上和人脑的学习方式十分相似) 最基本的AI训练流程 Your browser does not support the video tag. 流程我们可以看到, 基本的ai训练流程就是: 准备数据集, 划分测试和训练集 定义模型 根据训练集进行训练 用测试集测试模型 感知机介绍神经网络中每一层有多个始建于, 而每个神经元可以看作一个感知机,感知机是一种二元线性分类器, 它接收多个输入信号，输出一个信号(0或1), 0表示不传递信号, 1表示传递信号(被激活) 用数学式子表达: y&#x3D;(w1x1+w2x2+b &gt;&#x3D; θ) &#x3D; 1, y&#x3D;(w1x1+w2x2+b &lt; θ) &#x3D; 0 w是权重, 和x相乘, 表示对应x的重要程度, 越大则越重要 b是偏置, 用来调整神经元(即感知机)被激活的容易程度 θ是神经元被激活的临界点, 超过了就可以输出信号1, 否则输出0 感知机的问题感知机可以做到","tags":["ai"],"categories":["ai"]},{"title":"nextjs使用next-themes实现明亮黑暗主题切换","path":"/2024/08/27/nextjs/nextjs-beginner-themes/zh-cn/","content":"明亮黑暗主题明暗主题就是整体颜色是亮色或暗色的主题, 根据用户使用场景(比如白天或夜晚), 提供切换选项来切换系统整体颜色, 让用户视觉上拥有更舒适的体验 git仓库本章是nextjs入门课程系列的一部分, 查看以下git仓库, 并切换到extra1分支, 可查看本章代码 course-repositoryhttps://github.com/malred/hexo-blog-nextjs-course 安装next-themes1pnpm install next-themes 配置tailwind主题支持123456789// tailwind.config.tsimport type &#123;Config&#125; from &quot;tailwindcss&quot;;const config: Config = &#123; // 通过类名的方式配置mode darkMode: [&#x27;selector&#x27;, &#x27;.dark&#x27;], /// ...&#125;;export default config; 在layout.tsx中添加providerjsx123456789101112131415161718192021222324// app/layout.tsx///import &#123;ThemeProvider&#125; from &quot;next-themes&quot;;/// ...export default function RootLayout(&#123; children, &#125;: Readonly&lt;&#123; children: React.ReactNode;&#125;&gt;) &#123; return ( &lt;html lang=&quot;en&quot; suppressHydrationWarning&gt; &lt;body className=&#123;inter.className&#125;&gt; &#123;/*提供主题状态*/&#125; &lt;ThemeProvider&gt; &lt;Navbar/&gt; &#123;children&#125; &lt;Footbar/&gt; &lt;/ThemeProvider&gt; &lt;/body&gt; &lt;/html&gt; );&#125; 在navbar中添加切换按钮jsx12345678910111213141516171819202122232425// components/navbar.tsx&quot;use client&quot;;import &#123;useTheme&#125; from &quot;next-themes&quot;;export default function Navbar() &#123; // 获取当前主题和设置主题的方法 const &#123;setTheme, resolvedTheme&#125; = useTheme(); return ( &lt;nav className=&#123;&#x27;bg-green-200 border-b border-b-gray-300 sticky w-full h-20 flex items-center&#x27;&#125;&gt; &lt;div className=&#123;&#x27;flex-1&#x27;&#125;&gt;&lt;/div&gt; &#123;resolvedTheme !== &#x27;dark&#x27; ? // 切换颜色主题的按钮 &lt;img className=&#123;&#x27;size-10&#x27;&#125; onClick=&#123;() =&gt; setTheme(&#x27;dark&#x27;)&#125; src=&quot;https://www.svgrepo.com/show/489517/mode-dark.svg&quot; alt=&quot;to dark theme mode&quot;/&gt; : &lt;img className=&#123;&#x27;size-10&#x27;&#125; onClick=&#123;() =&gt; setTheme(&#x27;light&#x27;)&#125; src=&quot;https://www.svgrepo.com/show/489519/mode-light.svg&quot; alt=&quot;to light theme mode&quot;/&gt; &#125; &lt;/nav&gt; )&#125; 关于”use client”: 这是启用了客户端的功能, 比如js交互&#x2F;浏览器storage&#x2F;cookie等 在nextjs文档中学习它https://nextjs.org/docs/app/building-your-application/rendering/client-components 查看效果: 明亮模式 黑暗模式 针对黑暗模式添加样式你是否发现了, 暗黑模式下文字样式改变了, 而有些我们已经指定了样式(className中)的没有改变. 我们可以使用dark:来配置黑暗模式下的样式 jsx1234567891011121314151617181920212223242526272829// components/navbar.tsx&quot;use client&quot;;import &#123;useTheme&#125; from &quot;next-themes&quot;;export default function Navbar() &#123; /// ... return ( &lt;nav className=&#123; `bg-green-200 dark:bg-green-800 ...` &#125;&gt; &#123;/*...*/&#125; &lt;/nav&gt; )&#125;// components/footbar.tsxexport default function Footbar() &#123; return ( &lt;footer className=&#123; `bg-gray-200 dark:bg-gray-800 ...` &#125;&gt; footbar &lt;/footer&gt; )&#125; jsx12345678910111213141516171819202122232425// app/blog/[slug]/page.tsx// 服务端组件可以使用async export default async function BlogPage(&#123; params, searchParams, &#125;: &#123; params: &#123; slug: string &#125; // 接收url参数: (/blog/[slug] -&gt; slug) searchParams: &#123;&#125;&#125;) &#123; /// ... return ( // flex flex-row justify-center -&gt; 内容居中 &lt;div className=&#123;&#x27;w-screen flex flex-row justify-center&#x27;&#125;&gt; &#123;/* prose让文本中的标题有对应的样式 dark:prose-invert是让prose适配黑暗主题 */&#125; &lt;div className=&#123;`prose dark:prose-invert`&#125; dangerouslySetInnerHTML=&#123;&#123;__html: html&#125;&#125;&gt; &lt;/div&gt; &lt;/div&gt; )&#125; 效果: 结束谢谢观看!","tags":["nextjs","frontend"],"categories":["nextjs","frontend"]},{"title":"Next.js uses next-themes to implement a bright and dark theme switcher.","path":"/2024/08/27/nextjs/nextjs-beginner-themes/en/","content":"Bright and Dark ThemesBright and dark themes refer to themes with light or dark color schemes. Depending on the user’s context(e.g., daytime or nighttime), providing an option to switch the overall system colors can enhance the visual comfort forusers. Git RepositoryThis chapter is part of the Next.js beginner course series. To view the code for this chapter, check out the followinggit repository and switch to the extra1 branch: course-repositoryhttps://github.com/malred/hexo-blog-nextjs-course install next-themes1pnpm install next-themes Configure Tailwind Theme Support123456789// tailwind.config.tsimport type &#123;Config&#125; from &quot;tailwindcss&quot;;const config: Config = &#123; // Configure Mode via Class Names darkMode: [&#x27;selector&#x27;, &#x27;.dark&#x27;], /// ...&#125;;export default config; Add a Provider in layout.tsxjsx123456789101112131415161718192021222324// app/layout.tsx///import &#123;ThemeProvider&#125; from &quot;next-themes&quot;;/// ...export default function RootLayout(&#123; children, &#125;: Readonly&lt;&#123; children: React.ReactNode;&#125;&gt;) &#123; return ( &lt;html lang=&quot;en&quot; suppressHydrationWarning&gt; &lt;body className=&#123;inter.className&#125;&gt; &#123;/*Provide Theme State*/&#125; &lt;ThemeProvider&gt; &lt;Navbar/&gt; &#123;children&#125; &lt;Footbar/&gt; &lt;/ThemeProvider&gt; &lt;/body&gt; &lt;/html&gt; );&#125; Add a Switch Button in the Navbarjsx12345678910111213141516171819202122232425// components/navbar.tsx&quot;use client&quot;;import &#123;useTheme&#125; from &quot;next-themes&quot;;export default function Navbar() &#123; // Methods to Get the Current Theme and Set the Theme const &#123;setTheme, resolvedTheme&#125; = useTheme(); return ( &lt;nav className=&#123;&#x27;bg-green-200 border-b border-b-gray-300 sticky w-full h-20 flex items-center&#x27;&#125;&gt; &lt;div className=&#123;&#x27;flex-1&#x27;&#125;&gt;&lt;/div&gt; &#123;resolvedTheme !== &#x27;dark&#x27; ? // Button to Switch Color Themes &lt;img className=&#123;&#x27;size-10&#x27;&#125; onClick=&#123;() =&gt; setTheme(&#x27;dark&#x27;)&#125; src=&quot;https://www.svgrepo.com/show/489517/mode-dark.svg&quot; alt=&quot;to dark theme mode&quot;/&gt; : &lt;img className=&#123;&#x27;size-10&#x27;&#125; onClick=&#123;() =&gt; setTheme(&#x27;light&#x27;)&#125; src=&quot;https://www.svgrepo.com/show/489519/mode-light.svg&quot; alt=&quot;to light theme mode&quot;/&gt; &#125; &lt;/nav&gt; )&#125; Regarding “use client”: This enables client-side features such as JavaScript interactions, browser storage (Storage),cookies, etc. Learn about it in the Next.js documentation.https://nextjs.org/docs/app/building-your-application/rendering/client-components Result:light dark Add Styles for Dark ModeHave you noticed that the text style changes in dark mode, while some styles we have specified (in className) remainunchanged? We can use dark: to configure styles for dark mode. jsx1234567891011121314151617181920212223242526272829// components/navbar.tsx&quot;use client&quot;;import &#123;useTheme&#125; from &quot;next-themes&quot;;export default function Navbar() &#123; /// ... return ( &lt;nav className=&#123; `bg-green-200 dark:bg-green-800 ...` &#125;&gt; &#123;/*...*/&#125; &lt;/nav&gt; )&#125;// components/footbar.tsxexport default function Footbar() &#123; return ( &lt;footer className=&#123; `bg-gray-200 dark:bg-gray-800 ...` &#125;&gt; footbar &lt;/footer&gt; )&#125; jsx1234567891011121314151617181920212223// app/blog/[slug]/page.tsxexport default async function BlogPage(&#123; params, searchParams, &#125;: &#123; params: &#123; slug: string &#125; searchParams: &#123;&#125;&#125;) &#123; /// ... return ( &lt;div className=&#123;&#x27;w-screen flex flex-row justify-center&#x27;&#125;&gt; &#123;/* Prose ensures that headings within the text have corresponding styles. `dark:prose-invert` is used to adapt prose for dark themes. */&#125; &lt;div className=&#123;`prose dark:prose-invert`&#125; dangerouslySetInnerHTML=&#123;&#123;__html: html&#125;&#125;&gt; &lt;/div&gt; &lt;/div&gt; )&#125; Result: EndThanks for watch!","tags":["nextjs","frontend"],"categories":["nextjs","frontend"]},{"title":"使用Clap创建rust前端项目初始化脚手架","path":"/2024/08/26/rust/rust-project-cli/zh-cn/","content":"本文目标该文章将带你使用rust和clap库实现一个创建前端vite项目的脚手架工具 git仓库本文基于我的开源项目rust-init-cli改编 malred: rust-init-clihttps://github.com/malred/rust-init-cli.git 第一步: 初始化项目安装1234cargo init rust-vite-clicd rust-vite-cli# 如果你用vscode, 可以用这个命令打开code . 依赖安装123cargo add clap# or cargo add clap -F derive 第二步: clap读取命令行clap - cargohttps://docs.rs/clap/latest/clap/ clap文档https://rust-cli.github.io/book/index.html Args结构体创建一个结构体来接收命令行参数 123456#[derive(Parser)]#[command()]struct Args &#123; #[command(subcommand)] command: Option&lt;Commands&gt;,&#125; 关于subcommand, 大概就是可以用在结构体和枚举等类型上 1234567891011/// 从源代码找的注释/// Parse a sub-command into a user-defined enum.////// Implementing this trait lets a parent container delegate subcommand behavior to `Self`./// with:/// - `#[command(subcommand)] field: SubCmd`: Attribute can be used with either struct fields or enum/// variants that impl `Subcommand`./// - `#[command(flatten)] Variant(SubCmd)`: Attribute can only be used with enum variants that impl/// `Subcommand`.////// **NOTE:** Deriving requires the `derive` feature flag Commands结构体我们实现Commands结构体, 结构体的属性会对应命令 123456// clap可以通过反射宏读取注释, 在help时打印出来#[derive(Subcommand)]enum Commands &#123; /// create-vite CreateVite&#125; 接下来, 在main函数中读取 12345678910fn main() &#123; let cli = Args::parse(); match cli.command &#123; Some(Commands::CreateVite) =&gt; println!(&quot;create vite!&quot;), None =&gt; &#123; println!(&quot;Run with --help to see instructions.&quot;) &#125; &#125;&#125; 运行! 123cargo run -- create-vite# or cargo run --release create-vite 如果运行help命令 第三步: 从vite脚手架中复制项目模板我们并没有采用从网络获取前端项目模板的实现方法, 而是使用将前端项目模板保存到目录, 当创建项目时再复制到目标目录的实现方式,这种方式当然有坏处, 比如会让项目过大, 要手动将目录放到build后的文件夹等, 但是好处是实现起来比较简单方便 使用vite脚手架创建项目我们先用vite脚手架创建项目, 然后再将项目复制到我们项目的public文件夹中 1pnpm create vite 我们只创建vue+js&#x2F;vue+ts&#x2F;react+js&#x2F;react+ts这4个项目 创建示例 创建完后, 复制到项目的public文件夹下 目录结构如图 第四步: 编写需要用到的方法创建common.rs, 我们在其中存放通用的工具类方法 123src/ common.rs main.rs 将common模块引入main.rs 12// main.rsmod common; 读取命令行输入的方法123456789101112// common.rs// 读取输入pub fn read_line() -&gt; String &#123; // 用来存放用户输入的字符串 let mut input = String::new(); // 读取命令行输入 std::io::stdin() .read_line(&amp;mut input) .expect(&quot;Stdin not working&quot;); input.trim().to_string()&#125; 复制文件到指定目录的方法1234567891011121314151617181920212223// common.rsuse std::&#123;fs, io, path::Path&#125;;// 复制文件夹到指定路径pub fn copy_dir_all(src: impl AsRef&lt;Path&gt;, dst: impl AsRef&lt;Path&gt;) -&gt; io::Result&lt;()&gt; &#123; // fs::create_dir_all(&amp;dst)?; fs::create_dir_all(&amp;dst).expect(&quot;创建dst目录失败&quot;); // println!(&quot;遍历&quot;); fs::read_dir(&amp;src).expect(&quot;找不到src目录&quot;); for entry in fs::read_dir(src)? &#123; let entry = entry?; let ty = entry.file_type()?; if ty.is_dir() &#123; copy_dir_all(entry.path(), dst.as_ref().join(entry.file_name()))?; &#125; else &#123; fs::copy(entry.path(), dst.as_ref().join(entry.file_name()))?; &#125; &#125; // println!(&quot;copy dir done.&quot;); Ok(())&#125; 获取运行时目录位置的方法我原本希望能让程序在运行时找到src下的public文件夹, 但是发现不行, 后面找到可以获取运行时目录的方法,这样就可以把public文件复制到target下的debug或release里, 让程序不管在什么地方运行都可以找到public里的文件,并开始复制 123456789src/ main.rstarget/ cargo run运行时的current_exe目录 debug/ public/... cargo build之后运行exe时的current_exe目录 release/ public/... 12345678910111213// common.rsuse std::&#123;fs, path::Path, env::current_exe&#125;;// 获取运行时目录pub fn current_exe_pkg() -&gt; String &#123; let pkg_name = env!(&quot;CARGO_PKG_NAME&quot;); // println!(&quot;&#123;pkg_name&#125;.exe&quot;); let pkg_name = pkg_name.to_string() + &quot;.exe&quot;; // 获取当前目录的路径 let current_exe = current_exe().unwrap(); current_exe.display().to_string().replace(&amp;pkg_name, &quot;&quot;)&#125; 关于env!的解释https://doc.rust-lang.org/std/env/index.html 第五步: 创建项目的逻辑在做完了前面的准备工作后, 终于要开始编写了创建项目的逻辑了. 这一步的内容都放在vite.rs里 123src/ main.rs vite.rs 12// main.rsmod vite; 保存用户输入的结构体为了保存用户输入, 以便后续根据输入的选项创建不同的项目, 我们需要一个结构体来保存这些数据 12345678910111213141516171819202122// vite.rs// 用户使用什么框架#[derive(Debug)]enum FrameworkType &#123; React, Vue,&#125;// 用户是否使用ts#[derive(Debug)]enum VariantType &#123; Javascript, Typescript,&#125;#[derive(Debug)]struct UserSelected &#123; framework_type: FrameworkType, variant_type: VariantType, project_name: String, // 项目名称&#125; 为结构体添加方法我们需要两个方法, 一个是创建结构体的方法, 一个是创建项目的方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687// vite.rsuse std::path::Path;use crate::common::&#123;copy_dir_all, current_exe_pkg, read_line&#125;;impl UserSelected &#123; fn new(project_name: &amp;str, framework: &amp;str, variant: &amp;str) -&gt; Self &#123; let framework_type = match framework &#123; &quot;react&quot; =&gt; &#123; FrameworkType::React &#125; &quot;vue&quot; =&gt; &#123; FrameworkType::Vue &#125; _ =&gt; &#123; // panic!(&quot;No such framework type&quot;) // default FrameworkType::React &#125; &#125;; let variant_type = match variant &#123; &quot;javascript&quot; =&gt; &#123; VariantType::Javascript &#125; &quot;typescript&quot; =&gt; &#123; VariantType::Typescript &#125; &quot;js&quot; =&gt; &#123; VariantType::Javascript &#125; &quot;ts&quot; =&gt; &#123; VariantType::Typescript &#125; _ =&gt; &#123; // panic!(&quot;No such variant type&quot;) VariantType::Typescript &#125; &#125;; let project_name = if project_name.is_empty() &#123; &quot;vite-project&quot; &#125; else &#123; project_name &#125;; UserSelected &#123; project_name: project_name.to_string(), framework_type: framework_type, variant_type: variant_type, // file_name: &quot;&quot;.to_string(), &#125; &#125; // 创建文件 fn init(&amp;self) &#123; let mut path = &quot;public/vite/&quot;.to_string(); match self.framework_type &#123; FrameworkType::React =&gt; &#123; path += &quot;react&quot;; &#125; FrameworkType::Vue =&gt; &#123; path += &quot;vue&quot;; &#125; &#125; path += &quot;-&quot;; match self.variant_type &#123; VariantType::Javascript =&gt; &#123; path += &quot;js&quot;; &#125; VariantType::Typescript =&gt; &#123; path += &quot;ts&quot;; &#125; &#125; println!(&quot;复制 &#123;&#125;&quot;, &amp;(current_exe_pkg() + &amp;path)); // todo: 从网络上下载 或 调用cmd git clone copy_dir_all( Path::new( &amp;(current_exe_pkg() + &amp;path) ), Path::new(&amp;self.project_name), ).unwrap(); &#125;&#125; 询问并接收用户输入1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// vite.rspub fn create_vite_project() &#123; // project name println!(&quot;your project name? &#123;&#125;&quot;, &quot;vite-project&quot;); let project_name = read_line(); let project_name = if project_name.is_empty() &#123; &quot;vite-project&quot; &#125; else &#123; &amp;project_name &#125;; println!(&quot;&#123;&#125;&quot;, (&amp;project_name)); // select a framework // react vue ... println!(&quot;select a framework: (default: react)&quot;); println!(&quot;react&quot;); println!(&quot;vue&quot;); let mut framework = read_line().to_lowercase(); framework = match framework.as_str() &#123; &quot;r&quot; =&gt; &quot;react&quot;.to_string(), &quot;react&quot; =&gt; &quot;react&quot;.to_string(), &quot;v&quot; =&gt; &quot;vue&quot;.to_string(), &quot;vue&quot; =&gt; &quot;vue&quot;.to_string(), _ =&gt; &quot;react&quot;.to_string(), &#125;; println!(&quot;&#123;&#125;&quot;, (&amp;framework)); // select a variant // javascript typescript ... println!(&quot;select a variant: (default: ts)&quot;); println!(&quot;typescript(ts)&quot;); println!(&quot;javascript(js)&quot;); let mut variant = read_line().to_lowercase(); variant = match variant.as_str() &#123; &quot;ts&quot; =&gt; &quot;typescript&quot;.to_string(), &quot;typescript&quot; =&gt; &quot;typescript&quot;.to_string(), &quot;js&quot; =&gt; &quot;javascript&quot;.to_string(), &quot;javascript&quot; =&gt; &quot;javascript&quot;.to_string(), _ =&gt; &quot;typescript&quot;.to_string(), &#125;; println!(&quot;&#123;&#125;&quot;, (&amp;variant)); let user_select = UserSelected::new(&amp;project_name, &amp;framework, &amp;variant); user_select.init();&#125; 第六步: 测试修改main.rs123456789101112// main.rsfn main() &#123; let cli = Args::parse(); match cli.command &#123; Some(Commands::CreateVite) =&gt; create_vite_project(), None =&gt; &#123; println!(&quot;Run with --help to see instructions.&quot;) &#125; &#125;&#125; 测试cargo run将public目录移动到target&#x2F;debug目录 测试cargo run时能否成功 1cargo run -- create-vite 可以看到在项目根目录成功创建了vite-project目录 测试cargo build后的exe先复制public目录到target&#x2F;release目录 12cargo build --release.\\target\\release\\rust-vite-cli.exe create-vite end接下来, 你可以将release目录的文件复制到系统的任意目录, 然后将其配置到系统环境变量, 就可以随时随地运行 rust-vite-clicreate-vite 来创建前端项目了. 感谢观看","tags":["rust","CLI","command app"],"categories":["rust","CLI","command app"]},{"title":"Creating a Rust Front-End Project Initialization Scaffolding Using Clap","path":"/2024/08/26/rust/rust-project-cli/en/","content":"Objective of this ArticleThis article will guide you through using Rust and the clap library to create a scaffolding tool for generatingfront-end Vite projects. Git RepositoryThis article is adapted from my open-source project rust-init-cli. malred: rust-init-clihttps://github.com/malred/rust-init-cli.git Step One: Initializing the ProjectInstallation1234cargo init rust-vite-clicd rust-vite-cli# If you are using VSCode, you can use this command to open it.code . Dependency Installation123cargo add clap# or cargo add clap -F derive Step Two: Using Clap to Read the Command Lineclap - cargohttps://docs.rs/clap/latest/clap/ clap文档https://rust-cli.github.io/book/index.html Args StructCreate a struct to receive command line arguments. 123456#[derive(Parser)]#[command()]struct Args &#123; #[command(subcommand)] command: Option&lt;Commands&gt;,&#125; Regarding subcommands, they can generally be used with types such as structs and enumerations. 1234567891011/// Comments found in the source code./// Parse a sub-command into a user-defined enum.////// Implementing this trait lets a parent container delegate subcommand behavior to `Self`./// with:/// - `#[command(subcommand)] field: SubCmd`: Attribute can be used with either struct fields or enum/// variants that impl `Subcommand`./// - `#[command(flatten)] Variant(SubCmd)`: Attribute can only be used with enum variants that impl/// `Subcommand`.////// **NOTE:** Deriving requires the `derive` feature flag Commands StructWe implement the Commands struct, and its attributes will correspond to commands. 123456// Clap can read comments through reflection macros and print them out when help is requested.#[derive(Subcommand)]enum Commands &#123; /// create-vite CreateVite&#125; Next, read in the main function. 12345678910fn main() &#123; let cli = Args::parse(); match cli.command &#123; Some(Commands::CreateVite) =&gt; println!(&quot;create vite!&quot;), None =&gt; &#123; println!(&quot;Run with --help to see instructions.&quot;) &#125; &#125;&#125; Run it! 123cargo run -- create-vite# or cargo run --release create-vite If you run the help command Step Three: Copying the Project Template from Vite ScaffoldRather than retrieving front-end project templates from the internet, we opt to save the front-end project template in adirectory and copy it to the target directory when creating a new project.This method has its downsides, such as increasing the size of the project and requiring manual placement of thedirectory into the build folder. However, the advantage is that it is relatively simple and convenient to implement. Creating a Project with Vite ScaffoldFirst, we create a project using the Vite scaffold, and then copy the project into our project’s public folder. 1pnpm create vite We will only create these four types of projects: Vue+JS, Vue+TS, React+JS, and React+TS. example After creation, copy them to the public folder of the project. Directory structure as shown in Figure Step Four: Writing the Methods NeededCreate common.rs, where we will store commonly used utility class methods. 123src/ common.rs main.rs Incorporate the common module into main.rs. 12// main.rsmod common; Method for reading command line input.123456789101112// common.rs// read inputspub fn read_line() -&gt; String &#123; // Used to store the string input by the user. let mut input = String::new(); // Reading command line input. std::io::stdin() .read_line(&amp;mut input) .expect(&quot;Stdin not working&quot;); input.trim().to_string()&#125; Method for copying files to a specified directory.1234567891011121314151617181920212223// common.rsuse std::&#123;fs, io, path::Path&#125;;// Copy a folder to a specified path.pub fn copy_dir_all(src: impl AsRef&lt;Path&gt;, dst: impl AsRef&lt;Path&gt;) -&gt; io::Result&lt;()&gt; &#123; // fs::create_dir_all(&amp;dst)?; fs::create_dir_all(&amp;dst).expect(&quot;创建dst目录失败&quot;); // println!(&quot;遍历&quot;); fs::read_dir(&amp;src).expect(&quot;找不到src目录&quot;); for entry in fs::read_dir(src)? &#123; let entry = entry?; let ty = entry.file_type()?; if ty.is_dir() &#123; copy_dir_all(entry.path(), dst.as_ref().join(entry.file_name()))?; &#125; else &#123; fs::copy(entry.path(), dst.as_ref().join(entry.file_name()))?; &#125; &#125; // println!(&quot;copy dir done.&quot;); Ok(())&#125; Method for obtaining the runtime directory location.I initially hoped to enable the program to locate the public folder under src at runtime, but found that it was notfeasible. Later, I discovered a method to obtain the runtime directory.This allows the public files to be copied into the target’s debug or release directories, ensuring that the program canlocate the files in the public folder regardless of where it is running and begin the copying process. 123456789src/ main.rstarget/ cargo run运行时的current_exe目录 debug/ public/... cargo build之后运行exe时的current_exe目录 release/ public/... 12345678910111213// common.rsuse std::&#123;fs, path::Path, env::current_exe&#125;;// Get runtime directorypub fn current_exe_pkg() -&gt; String &#123; let pkg_name = env!(&quot;CARGO_PKG_NAME&quot;); // println!(&quot;&#123;pkg_name&#125;.exe&quot;); let pkg_name = pkg_name.to_string() + &quot;.exe&quot;; // Get the path of the current directory let current_exe = current_exe().unwrap(); current_exe.display().to_string().replace(&amp;pkg_name, &quot;&quot;)&#125; about env!https://doc.rust-lang.org/std/env/index.html Step Five: Logic for Project CreationAfter completing the preliminary preparations, we can finally begin to write the logic for creating projects. This stepinvolves content that is all placed within vite.rs. 123src/ main.rs vite.rs 12// main.rsmod vite; Struct for Storing User InputIn order to save user input for subsequent creation of different projects based on the input options, we need a structto store this data. 12345678910111213141516171819202122// vite.rs// Which framework the user uses#[derive(Debug)]enum FrameworkType &#123; React, Vue,&#125;// whether the user uses TS.#[derive(Debug)]enum VariantType &#123; Javascript, Typescript,&#125;#[derive(Debug)]struct UserSelected &#123; framework_type: FrameworkType, variant_type: VariantType, project_name: String, // project name&#125; Adding Methods to the StructWe need two methods: one for creating the struct, and another for creating the project. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687// vite.rsuse std::path::Path;use crate::common::&#123;copy_dir_all, current_exe_pkg, read_line&#125;;impl UserSelected &#123; fn new(project_name: &amp;str, framework: &amp;str, variant: &amp;str) -&gt; Self &#123; let framework_type = match framework &#123; &quot;react&quot; =&gt; &#123; FrameworkType::React &#125; &quot;vue&quot; =&gt; &#123; FrameworkType::Vue &#125; _ =&gt; &#123; // panic!(&quot;No such framework type&quot;) // default FrameworkType::React &#125; &#125;; let variant_type = match variant &#123; &quot;javascript&quot; =&gt; &#123; VariantType::Javascript &#125; &quot;typescript&quot; =&gt; &#123; VariantType::Typescript &#125; &quot;js&quot; =&gt; &#123; VariantType::Javascript &#125; &quot;ts&quot; =&gt; &#123; VariantType::Typescript &#125; _ =&gt; &#123; // panic!(&quot;No such variant type&quot;) VariantType::Typescript &#125; &#125;; let project_name = if project_name.is_empty() &#123; &quot;vite-project&quot; &#125; else &#123; project_name &#125;; UserSelected &#123; project_name: project_name.to_string(), framework_type: framework_type, variant_type: variant_type, // file_name: &quot;&quot;.to_string(), &#125; &#125; // 创建文件 fn init(&amp;self) &#123; let mut path = &quot;public/vite/&quot;.to_string(); match self.framework_type &#123; FrameworkType::React =&gt; &#123; path += &quot;react&quot;; &#125; FrameworkType::Vue =&gt; &#123; path += &quot;vue&quot;; &#125; &#125; path += &quot;-&quot;; match self.variant_type &#123; VariantType::Javascript =&gt; &#123; path += &quot;js&quot;; &#125; VariantType::Typescript =&gt; &#123; path += &quot;ts&quot;; &#125; &#125; println!(&quot;复制 &#123;&#125;&quot;, &amp;(current_exe_pkg() + &amp;path)); // todo: 从网络上下载 或 调用cmd git clone copy_dir_all( Path::new( &amp;(current_exe_pkg() + &amp;path) ), Path::new(&amp;self.project_name), ).unwrap(); &#125;&#125; Ask and receive user input.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// vite.rspub fn create_vite_project() &#123; // project name println!(&quot;your project name? &#123;&#125;&quot;, &quot;vite-project&quot;); let project_name = read_line(); let project_name = if project_name.is_empty() &#123; &quot;vite-project&quot; &#125; else &#123; &amp;project_name &#125;; println!(&quot;&#123;&#125;&quot;, (&amp;project_name)); // select a framework // react vue ... println!(&quot;select a framework: (default: react)&quot;); println!(&quot;react&quot;); println!(&quot;vue&quot;); let mut framework = read_line().to_lowercase(); framework = match framework.as_str() &#123; &quot;r&quot; =&gt; &quot;react&quot;.to_string(), &quot;react&quot; =&gt; &quot;react&quot;.to_string(), &quot;v&quot; =&gt; &quot;vue&quot;.to_string(), &quot;vue&quot; =&gt; &quot;vue&quot;.to_string(), _ =&gt; &quot;react&quot;.to_string(), &#125;; println!(&quot;&#123;&#125;&quot;, (&amp;framework)); // select a variant // javascript typescript ... println!(&quot;select a variant: (default: ts)&quot;); println!(&quot;typescript(ts)&quot;); println!(&quot;javascript(js)&quot;); let mut variant = read_line().to_lowercase(); variant = match variant.as_str() &#123; &quot;ts&quot; =&gt; &quot;typescript&quot;.to_string(), &quot;typescript&quot; =&gt; &quot;typescript&quot;.to_string(), &quot;js&quot; =&gt; &quot;javascript&quot;.to_string(), &quot;javascript&quot; =&gt; &quot;javascript&quot;.to_string(), _ =&gt; &quot;typescript&quot;.to_string(), &#125;; println!(&quot;&#123;&#125;&quot;, (&amp;variant)); let user_select = UserSelected::new(&amp;project_name, &amp;framework, &amp;variant); user_select.init();&#125; Step Six: TestingModify main.rs123456789101112// main.rsfn main() &#123; let cli = Args::parse(); match cli.command &#123; Some(Commands::CreateVite) =&gt; create_vite_project(), None =&gt; &#123; println!(&quot;Run with --help to see instructions.&quot;) &#125; &#125;&#125; Test cargo runMove the public directory to the target&#x2F;debug directory. Test whether cargo run can be successful. 1cargo run -- create-vite It can be seen that the vite-project directory was successfully created in the root directory of the project. Test the exe after cargo build.Move the public directory to the target&#x2F;release directory. 12cargo build --release.\\target\\release\\rust-vite-cli.exe create-vite endNext, you can copy the files in the release directory to any directory on your system, then configure it into the systemenvironment variables, and you can run rust-vite-cli create-vite to create front-end projects anytime and anywhere. Thank you for watching.","tags":["rust","CLI","command app"],"categories":["rust","CLI","command app"]},{"title":"Getting Started with Next.js - v13","path":"/2024/08/25/nextjs/nextjs-beginner/en/","content":"What is NextjsNext.js is a full-stack SSR framework based on React, providing a series of tools for automatic configuration of React,allowing us to focus on building applications and simplify the configuration process. nextjshttps://nextjs.org/docs What is SSR（Server Side Render）SPA (Single Page App)When it comes to server-side rendering, we have to mention SPA (Single Page Applications). Examples of single pageapplications include React and Vue, which operate by downloading JavaScript to the client side for execution.They undergo compilation and building processes to create JavaScript virtual DOM objects, which are then mounted ontoindex.html all at once. Since they are mounted on a single HTML file, for instance: The SPA application provides an index.html file, which contains a div tag with a specified id. Then, in the entry JS of the SPA, the program is rendered and mounted onto the specified div. Other modifications are based on it, so it is a single-page application.Moreover, SPA programs place the JavaScript files for rendering and logical processing on the client side, where therendering tasks are handled by the client, hence they are also known as CSR (Client-Side Rendering) programs. On the other hand, server-side rendering involves the server rendering the HTML file and then delivering it to theclient, returning the corresponding HTML file based on different requests. Comparison PerformanceCSR assigns the rendering task to the client, which can lead to lag on devices with poor performance, but itrelatively reduces the server’s load. In contrast, SSR faces significant stress during peak request times due to theneed to handle a large volume of requests, but it alleviates pressure on the client side. SEO-friendlinessBefore rendering, it is difficult for CSR to obtain specific information about the webpage, making it notSEO-friendly. However, SSR can provide the rendered files to search engine crawlers, at which point the page contentis essentially complete, facilitating analysis and recognition by the engine algorithms. Initial load timeCSR requires downloading the JS to the client for rendering, so there might be a period of blankness on the page (anissue with initial screen rendering) before the JS is downloaded to the client.On the other hand, SSR renders the HTML on the server first, eliminating this step and reducing client-side burden,thus it can display content to users more quickly. Setup Nextjs Projectgit repositoryThe teaching content of this article will be placed in the GitHub repository, which can be studied in conjunction.Different branches will correspond to different chapters. course-repositoryhttps://github.com/malred/hexo-blog-nextjs-course init project12345npx create-next-app@latest next-course# orpnpm dlx create-next-app@latest next-course# or pnpm create next-app Alternatively, you can use my open-source project to create. rust-init-clihttps://github.com/malred/rust-init-cli rust-cli-panelhttps://github.com/malred/rust-cli-panel Function 1: File Routing System In version 13, Next.js introduced a new App Router built on React Server Components, which supports shared layouts,nested routes, loading states, error handling, and more. nextjs-routehttps://nextjs.org/docs/app/building-your-application/routing Next.js automatically recognizes files in the app directory with the extension .page.jsx or .page.tsx to createpages, while their parent or sibling files called layout.jsx or layout.tsx are used as page layouts for rendering. try itAssuming we want to create a blog website and the access path for the blog is site.example&#x2F;blog&#x2F;test&#x2F;,let’s create the directory file structure accordingly: 123456- app + blog + test + page.tsx - page.tsx - layout.tsx jsx123456789// app/blog/test/page.tsxexport default function TestBlogPage() &#123; return ( &lt;div&gt; Hi, there is a blog page! &lt;/div&gt; )&#125; Add a link to it in app/page.tsx. jsx1234567891011// app/page.tsxexport default function Home() &#123; return ( &lt;div&gt; &lt;a href=&#123;&#x27;/blog/test&#x27;&#125;&gt; Go to test blog &lt;/a&gt; &lt;/div&gt; );&#125; start it： 123npm run dev# or pnpm dev http://localhost:3000http://localhost:3000 Due to the default CSS styles, it looks a bit odd. Modify the content in globals.css to make the background look nicer. 12345:root &#123; /*--foreground-rgb: 0, 0, 0;*/ /*--background-start-rgb: 214, 219, 220;*/ /*--background-end-rgb: 255, 255, 255;*/&#125; result: home page click `Go to test blog` Ok, You completed the challenge！ Route mapped to URLFrom the example we just looked at, we can see that the mapping relationship from file to route is as follows: file://site.dir/app/a/b/page.jsx -> site.example/a/b Dynamic RouteYou might have noticed that the current URLs are hardcoded.If we need 10 different blog pages (such as blog/test2, blog/abc, blog/start), using this method would requiremanually creating 10 different xxx/page.js/jsx/ts/tsx files, which is very time-consuming and inefficient. Of course, Next.js provides a solution called dynamic routes. The file route mapping for it looks like this: file://site.dir/app/blog/[slug]/page.jsx -> site.example/blog/a, site.example/blog/b, site.example/blog/c try itModify our directory structure. 1234- app - blog + [slug] + page.tsx Create a blog content page. jsx12345678910// app/blog/[slug]/page.tsxexport default function BlogPage() &#123; return ( &lt;div&gt; &#123;/*生成随机数*/&#125; blog &#123;Math.round(Math.random() * 10)&#125; &lt;/div&gt; )&#125; Visiting `blog/a` reached our `[slug]/page`. If you have kept the `blog/test/page` from before, you'll find it still works. layoutNext.js provides a layout file that offers layout functionality, which is UI shared among multiple routes. Whennavigating, the layout retains its state, remains interactive, and does not re-render. Layouts can also be nested. Let’s analyze the layout file: jsx123456789101112131415161718192021222324252627import type &#123;Metadata&#125; from &quot;next&quot;;import &#123;Inter&#125; from &quot;next/font/google&quot;;import &quot;./globals.css&quot;;// This is a font, don&#x27;t worry about it for now.const inter = Inter(&#123;subsets: [&quot;latin&quot;]&#125;);// Provides metadata for the page.export const metadata: Metadata = &#123; title: &quot;Create Next App&quot;, description: &quot;Generated by create next app&quot;,&#125;;export default function RootLayout(&#123; children, &#125;: Readonly&lt;&#123; children: React.ReactNode;&#125;&gt;) &#123; return ( &lt;html lang=&quot;en&quot;&gt; &lt;body className=&#123;inter.className&#125;&gt; &#123;/*&quot;children&quot; refers to the content inside the subdirectory (including the layout and page of the subdirectory).*/&#125; &#123;children&#125; &lt;/body&gt; &lt;/html&gt; );&#125; Let’s add a navbar and a footbar.jsx12345678910111213141516171819// components/footbar.tsxexport default function Footbar() &#123; return ( &lt;footer className=&#123;&#x27;bg-gray-200 border-b border-b-gray-300 border-t border-t-gray-300 sticky h-20 w-full&#x27;&#125;&gt; footbar &lt;/footer&gt; )&#125;// components/navbar.tsxexport default function Navbar() &#123; return ( &lt;nav className=&#123;&#x27;bg-green-200 border-b border-b-gray-300 sticky w-full h-20&#x27;&#125;&gt; navbar &lt;/nav&gt; )&#125; Have you not learned Tailwind CSS yet? Check out this article (todo). add them to layout.tsx jsx1234567891011121314151617// app/layout.tsx/// export default function RootLayout(&#123; children, &#125;: Readonly&lt;&#123; children: React.ReactNode;&#125;&gt;) &#123; return ( &lt;html lang=&quot;en&quot;&gt; &lt;body className=&#123;inter.className&#125;&gt; &lt;Navbar/&gt; &#123;children&#125; &lt;Footbar/&gt; &lt;/body&gt; &lt;/html&gt; );&#125; Result： provide blog contentsOK, you now have dynamic routes that can match different names, as well as having created a navbar and footbar. However,we want the page to display more content. write markdownMany note-taking applications now support Markdown syntax, which is a method I particularly favor. Additionally, thereare numerous npm libraries available that can parse the contents of Markdown files into HTML rich text strings. learn markdown Syntax? see wiki or wait my new post(todo)https://en.wikipedia.org/wiki/Markdown let us change directory structure 123456- app - ...- contents - mountain.md - bird.md - flower.md mountain.md123456789101112131415161718![](https://cdn.pixabay.com/photo/2022/10/24/12/20/mountains-7543273_1280.jpg)# Title: Summit Reflections: A Mountain&#x27;s Mirror to the SoulClimbing mountains is more than a physical endeavor; it&#x27;s a journey of the spirit, where each peak reveals a facet ofinner strength. As I scaled the rugged trails, the grind of my boots against rock echoed the resilience required tosurmount life&#x27;s challenges. The ascent, steep and demanding, taught me endurance. With each step, I found a metaphor forthe effort needed to achieve one&#x27;s dreams.The view from the summit was not just a vista of vast landscapes but a perspective on the infinite possibilities lifeoffers. It reminded me that after every great effort comes a broad expanse of opportunity. The descent, oftenoverlooked, was no less instructive. It spoke of humility and caution; a reminder that what goes up must come down withgrace.This mountain experience distilled life into a simple yet profound truth: the journey matters as much as thedestination. It&#x27;s in the climb that we discover our mettle and in the view that we savor our triumphs.(_create by AI_)flower.md1234567891011121314151617![](https://cdn.pixabay.com/photo/2023/03/19/05/31/flower-7861942_960_720.jpg)# Title: Blossoming Insights: A Whiff of FlowersAs I meandered through the garden, the air was thick with the sweet perfume of blooming flowers. Each petal, a tenderbrushstroke on nature&#x27;s canvas, painted a picture of grace and resilience. The flowers, in their silent language, spokeof beauty that survives amidst the harshest conditions.A delicate rose, its petals softer than silk, nodded gently in the breeze. It reminded me that even the most stunningforms can emerge from thorny paths. In the blossoms, I saw a reflection of life&#x27;s inherent beauty and the fortitude toflourish despite challenges.The garden, with its kaleidoscope of colors, became a sanctuary where every flower told a story of transformation andgrowth. My spirits were lifted by this quiet symphony of scents and hues, a testament to nature&#x27;s power to inspire andreplenish the soul.(_create by AI_)bird.md123456789101112131415161718![](https://cdn.pixabay.com/photo/2024/01/19/18/08/bird-8519547_1280.jpg)# Title: Capturing the Charm of Feathered FriendsToday&#x27;s venture into the serene woods was a delightful encounter with nature&#x27;s delicate treasures. As I wandered throughthe dappled sunlight under the canopy, my camera was my faithful companion, ready to freeze moments in time.A soft trill caught my attention, leading me to a vibrant avian presence. A tiny bird, with feathers arrayed in hues ofblue and green, perched gracefully on a branch. It seemed almost aware of its own charm, bobbing and turning, as ifposing for an unseen audience.I snapped a sequence of shots, each click capturing a different angle of this natural splendor. The bird, in itsinnocence, carried on with its song, unaware of the beauty it bestowed upon my day.As I left the woods, my heart felt lighter, and my camera held a piece of joy that I will cherish. These moments ofconnection with nature are what truly nourish the soul.(_create by AI_) read and showInstall the dependencies required to parse Markdown. 123npm i marked# orpnpm i marked Read and parse files in the code. jsx123456789101112131415161718192021// app/blog/[slug]/page.tsximport &#123;readFile&#125; from &quot;node:fs/promises&quot;;import &#123;marked&#125; from &quot;marked&quot;;export default async function BlogPage(&#123; params, searchParams, &#125;: &#123; params: &#123; slug: string &#125; searchParams: &#123;&#125;&#125;) &#123; const text = await readFile(`./contents/$&#123;params.slug&#125;.md`, &#x27;utf8&#x27;) const html = marked(text) return ( &lt;div&gt; &lt;div dangerouslySetInnerHTML=&#123;&#123;__html: html&#125;&#125;&gt;&lt;/div&gt; &lt;/div&gt; )&#125; Great, we have now successfully parsed and rendered the Markdown text onto the page! Result: Address the issue with text styling.You might have noticed that our heading styles are the same as the regular text. This is because Tailwind CSS removesdefault CSS styles, but we can use a library to address this issue. tailwind-typographyhttps://tailwindcss.com/blog/tailwindcss-typography 123npm i -save-dev @tailwindcss/typography# orpnpm i -save-dev @tailwindcss/typography Register as a Tailwind plugin. 12345678// tailwind.config.tsconst config: Config = &#123; /// ... plugins: [ require(&#x27;@tailwindcss/typography&#x27;) ],&#125;;export default config; Then use it to add the ‘prose’ class name to components. jsx1234567891011121314151617181920212223// app/blog/[slug]/page.tsximport &#123;readFile&#125; from &quot;node:fs/promises&quot;;import &#123;marked&#125; from &quot;marked&quot;;export default async function BlogPage(&#123; params, searchParams, &#125;: &#123; params: &#123; slug: string &#125; // 接收url参数: (/blog/[slug] -&gt; slug) searchParams: &#123;&#125;&#125;) &#123; const text = await readFile(`./contents/$&#123;params.slug&#125;.md`, &#x27;utf8&#x27;) const html = marked(text) return ( // flex flex-row justify-center -&gt; 内容居中 &lt;div className=&#123;&#x27;w-screen flex flex-row justify-center&#x27;&#125;&gt; &#123;/* prose让文本中的标题有对应的样式 */&#125; &lt;div className=&#123;&#x27;prose&#x27;&#125; dangerouslySetInnerHTML=&#123;&#123;__html: html&#125;&#125;&gt;&lt;/div&gt; &lt;/div&gt; )&#125; Restart the server and access the page again. Function 2: Provide API interfaces.Next.js will parse the files in the api directory as backend interfaces, receiving and processing HTTP requests. We will move the operation of reading and parsing Markdown files to the backend (api directory), while keeping therendering work on the frontend (app directory). try itChange our directory structure. 12345- app + api + blogs + [slug] + route.ts The current correspondence between the file system and URLs is as follows: 1app/api/blogs/[slug]/route.ts -&gt; site.example.com/api/blogs/a, site.example.com/api/blogs/b, ... Write code to handle requests. 123456789101112131415161718192021222324252627282930313233// api/blogs/route.tsimport &#123;NextRequest, NextResponse&#125; from &quot;next/server&quot;;import &#123;readFile&#125; from &quot;node:fs/promises&quot;;import &#123;marked&#125; from &quot;marked&quot;;// 接收GET请求export async function GET(req: NextRequest) &#123; // 解析url let slug = req.url.slice( req.url.lastIndexOf(&#x27;/&#x27;) + 1, req.url.length ) let html try &#123; // 读取md文件 const text = await readFile(`./contents/$&#123;slug&#125;.md`, &#x27;utf8&#x27;) html = marked(text) &#125; catch (err) &#123; console.error(err) // 错误返回 return NextResponse.json(&#123;error: err&#125;) &#125; // 返回html内容 return NextResponse.json(&#123;html&#125;)&#125;// 接收POST请求export async function POST(req: NextRequest) &#123; return NextResponse.json(&#123;&#125;)&#125; Result: Access a non-existent md file. Access a file that normally exists. Request backend data from the front end. jsx1234567891011121314151617181920212223242526272829// app/blog/[slug]/page.tsx// 服务端组件可以使用asyncexport default async function BlogPage(&#123; params, searchParams, &#125;: &#123; params: &#123; slug: string &#125; // 接收url参数: (/blog/[slug] -&gt; slug) searchParams: &#123;&#125;&#125;) &#123; // 请求后端数据 let res = await fetch(`http://localhost:3000/api/blogs/$&#123;params.slug&#125;`, &#123; method: &quot;GET&quot; &#125;) let json = await res.json() let html if (json.error) html = &quot;Ooh! Something went wrong&quot; else html = json.html return ( // flex flex-row justify-center -&gt; 内容居中 &lt;div className=&#123;&#x27;w-screen flex flex-row justify-center&#x27;&#125;&gt; &#123;/* prose让文本中的标题有对应的样式 */&#125; &lt;div className=&#123;&#x27;prose&#x27;&#125; dangerouslySetInnerHTML=&#123;&#123;__html: html&#125;&#125;&gt;&lt;/div&gt; &lt;/div&gt; )&#125; Result: success Access a non-existent md file. At this point, we will pause here. To prevent the article from becoming too lengthy, I have placed the remaining contentin separate sections, which you can click below to continue reading. Next StepUse next-themes for day and night theme switching.Have you seen websites that can switch between light and dark themes? We can also achieve this. next-themeshttps://www.npmjs.com/package/next-themes bloghttps://malcode-site.github.io/2024/08/27/nextjs/nextjs-beginner-themes/en/ Connect to the database using Prisma.Storing data in a file system or cache is one option, but using a database to store data is a more common choice. prismahttps://www.prisma.io/ Use Next-Auth for authentication.Authentication is a common feature in applications. Using Next-Auth eliminates the hassle of creating your own login andregistration pages, allowing you to focus on implementing authentication logic. next-authhttps://next-auth.js.org/ Use TipTap as a rich text editor.TipTap is a modern headless rich text editor that allows us to easily create attractive page content. How to customize TipTap through code? Check out my latest article (todo). tiptap documenthttps://tiptap.dev/docs/editor/getting-started/overview","tags":["nextjs","frontend"],"categories":["nextjs","frontend"]},{"title":"nextjs入门 - v13","path":"/2024/08/25/nextjs/nextjs-beginner/zh-cn/","content":"什么是nextjsnextjs是一款基于react的全栈SSR框架，提供一系列自动配置react的工具，让我们可以专注于构建应用，简化配置流程 nextjshttps://nextjs.org/docs 什么是SSR（服务端渲染）SPA说到服务端渲染，就要提到SPA（单页面应用程序），单页面应用程序的例子就是React和Vue，他们是通过将js下载到客户端运行，进行编译、构建，然后创建出js虚拟DOM对象，再一次性挂载到index.html上，由于只是挂载到单个html上，比如： SPA程序提供一个index.html文件，然后里面有一个指定了id的div标签 然后在SPA的入口js中，将程序渲染并挂载到指定的div上 其他修改都是基于它来进行，所以是单页面应用程序。并且，SPA程序会将进行渲染和逻辑处理的js文件放在客户端，渲染的工作是交给客户端进行所以也叫CSR（客户端渲染）程序 而服务端渲染则是由服务器将HTML文件渲染后交给客户端的，根据不同请求返回对应的html文件。 对比 性能CSR将渲染的任务交给客户端，对于性能不好的设备来说，将会变得卡顿，但是相对的，减轻了服务器的负担。而SSR则相反，在请求高峰期需要处理大量请求，这将会是巨大的压力，但是可以减轻客户端的压力 SEO友好性客户端渲染在渲染前是很难获取到网页具体信息的，对于SEO来说并不友好，而服务端渲染则可以将渲染好的文件交给搜索引擎爬虫，此时页面内容基本完整，利于引擎算法进行分析识别 首次加载时间CSR需要将js下载到客户端进行渲染，所以在js下载到客户端之前有可能遭遇到一段时间的页面空白（首屏渲染问题）而SSR在服务端先渲染好HTML，省去了这个步骤，并且减少了客户端压力，所以可以更快地向用户展示内容 Setup Nextjs Projectgit仓库本文的教学内容将放入github仓库，可以结合着学习，不同分支将对应不同的章节 course-repositoryhttps://github.com/malred/hexo-blog-nextjs-course 创建项目12345npx create-next-app@latest next-course# orpnpm dlx create-next-app@latest next-course# or pnpm create next-app 或者使用我的开源项目来创建 rust-init-clihttps://github.com/malred/rust-init-cli rust-cli-panelhttps://github.com/malred/rust-cli-panel 功能1：文件路由系统 在版本 13 中，Next.js 引入了一个基于React Server Components构建的新App Router ，它支持共享布局、嵌套路由、加载状态、错误处理等。 nextjs-routehttps://nextjs.org/docs/app/building-your-application/routing Nextjs会自动识别app目录中的page.jsx/.tsx文件来创建页面，而父级或同级的layout.jsx/.tsx会作为页面布局进行渲染 来试一下假设我们要创建一个博客网站，站点中的博客的访问路径为site.example&#x2F;blog&#x2F;test&#x2F;，那么，让我们来创建这样的目录文件结构 123456- app + blog + test + page.tsx - page.tsx - layout.tsx jsx123456789// app/blog/test/page.tsxexport default function TestBlogPage() &#123; return ( &lt;div&gt; Hi, there is a blog page! &lt;/div&gt; )&#125; 在app/page.tsx中添加指向它的链接 jsx1234567891011// app/page.tsxexport default function Home() &#123; return ( &lt;div&gt; &lt;a href=&#123;&#x27;/blog/test&#x27;&#125;&gt; Go to test blog &lt;/a&gt; &lt;/div&gt; );&#125; 启动它： 123npm run dev# or pnpm dev http://localhost:3000http://localhost:3000 ok, 因为默认css样式的原因，看起来有点怪 修改一下globals.css里的内容，将背景变得好看点 12345:root &#123; /*--foreground-rgb: 0, 0, 0;*/ /*--background-start-rgb: 214, 219, 220;*/ /*--background-end-rgb: 255, 255, 255;*/&#125; 效果 首页 点击 Go to test blog Ok, 你完成了这个挑战！ route映射到URL从刚才的例子我们可以看出，文件到路由的映射关系为： file://site.dir/app/a/b/page.jsx -> site.example/a/b 动态路由你或许注意到了，现在的URL是硬编码的，如果我们需要10个不同的blog页面（比如blog&#x2F;test2, blog&#x2F;abc, blog&#x2F;start），那使用这种方式将要手动创建10个不同的xxx&#x2F;page.js&#x2F;jsx&#x2F;ts&#x2F;tsx，这是非常耗时且低效率的 当然，Nextjs为我们提供了名为动态路由的解决方案 它的文件路由映射是这样的： file://site.dir/app/blog/[slug]/page.jsx -> site.example/blog/a, site.example/blog/b, site.example/blog/c 试一下修改我们的目录结构 1234- app - blog + [slug] + page.tsx 创建博客内容页面 jsx12345678910// app/blog/[slug]/page.tsxexport default function BlogPage() &#123; return ( &lt;div&gt; &#123;/*生成随机数*/&#125; blog &#123;Math.round(Math.random() * 10)&#125; &lt;/div&gt; )&#125; 访问blog/a到达了我们的[slug]/page 如果你保留了刚刚的blog/test/page，会发现它依然生效 布局Nextjs提供layout文件，提供布局功能，它是在多个路由之间共享的UI。在导航时，布局保留状态、保持交互性并且不重新渲染。布局也可以嵌套。 分析一下layout文件 jsx123456789101112131415161718192021222324252627import type &#123;Metadata&#125; from &quot;next&quot;;import &#123;Inter&#125; from &quot;next/font/google&quot;;import &quot;./globals.css&quot;;// 这个是字体，暂时不用管const inter = Inter(&#123;subsets: [&quot;latin&quot;]&#125;);// 提供页面的元数据export const metadata: Metadata = &#123; title: &quot;Create Next App&quot;, description: &quot;Generated by create next app&quot;,&#125;;export default function RootLayout(&#123; children, &#125;: Readonly&lt;&#123; children: React.ReactNode;&#125;&gt;) &#123; return ( &lt;html lang=&quot;en&quot;&gt; &lt;body className=&#123;inter.className&#125;&gt; &#123;/*children就是子目录里的内容（包含子目录的layout和page）*/&#125; &#123;children&#125; &lt;/body&gt; &lt;/html&gt; );&#125; 让我们添加navbar和footbarjsx12345678910111213141516171819// components/footbar.tsxexport default function Footbar() &#123; return ( &lt;footer className=&#123;&#x27;bg-gray-200 border-b border-b-gray-300 border-t border-t-gray-300 sticky h-20 w-full&#x27;&#125;&gt; footbar &lt;/footer&gt; )&#125;// components/navbar.tsxexport default function Navbar() &#123; return ( &lt;nav className=&#123;&#x27;bg-green-200 border-b border-b-gray-300 sticky w-full h-20&#x27;&#125;&gt; navbar &lt;/nav&gt; )&#125; 你或许还没学过tailwindcss？看这篇文章（todo） 将它们添加到layout.tsx jsx123456789101112131415161718// app/layout.tsx/// export default function RootLayout(&#123; children, &#125;: Readonly&lt;&#123; children: React.ReactNode;&#125;&gt;) &#123; return ( &lt;html lang=&quot;en&quot;&gt; &lt;body className=&#123;inter.className&#125;&gt; &lt;Navbar/&gt; &#123;/*children就是子目录里的内容（包含子目录的layout和page）*/&#125; &#123;children&#125; &lt;Footbar/&gt; &lt;/body&gt; &lt;/html&gt; );&#125; 效果： 提供博客内容OK, 你现在已经有了可以匹配不同名称的动态的路由, 以及创建了navbar和footbar, 但是, 我们希望页面能呈现更多内容. 编写markdown现在很多笔记软件都支持markdown语法, 这也是我本人比较喜欢的一种方式, 而现在也有很多npm库支持将markdown文件内容解析为html富文本串 学习markdown语法? 查看wiki或者等待我的新文章(todo)https://en.wikipedia.org/wiki/Markdown 让我们改变目录结构 123456- app - ...- contents - mountain.md - bird.md - flower.md mountain.md123456789101112131415161718![](https://cdn.pixabay.com/photo/2022/10/24/12/20/mountains-7543273_1280.jpg)# Title: Summit Reflections: A Mountain&#x27;s Mirror to the SoulClimbing mountains is more than a physical endeavor; it&#x27;s a journey of the spirit, where each peak reveals a facet ofinner strength. As I scaled the rugged trails, the grind of my boots against rock echoed the resilience required tosurmount life&#x27;s challenges. The ascent, steep and demanding, taught me endurance. With each step, I found a metaphor forthe effort needed to achieve one&#x27;s dreams.The view from the summit was not just a vista of vast landscapes but a perspective on the infinite possibilities lifeoffers. It reminded me that after every great effort comes a broad expanse of opportunity. The descent, oftenoverlooked, was no less instructive. It spoke of humility and caution; a reminder that what goes up must come down withgrace.This mountain experience distilled life into a simple yet profound truth: the journey matters as much as thedestination. It&#x27;s in the climb that we discover our mettle and in the view that we savor our triumphs.(_create by AI_)flower.md1234567891011121314151617![](https://cdn.pixabay.com/photo/2023/03/19/05/31/flower-7861942_960_720.jpg)# Title: Blossoming Insights: A Whiff of FlowersAs I meandered through the garden, the air was thick with the sweet perfume of blooming flowers. Each petal, a tenderbrushstroke on nature&#x27;s canvas, painted a picture of grace and resilience. The flowers, in their silent language, spokeof beauty that survives amidst the harshest conditions.A delicate rose, its petals softer than silk, nodded gently in the breeze. It reminded me that even the most stunningforms can emerge from thorny paths. In the blossoms, I saw a reflection of life&#x27;s inherent beauty and the fortitude toflourish despite challenges.The garden, with its kaleidoscope of colors, became a sanctuary where every flower told a story of transformation andgrowth. My spirits were lifted by this quiet symphony of scents and hues, a testament to nature&#x27;s power to inspire andreplenish the soul.(_create by AI_)bird.md123456789101112131415161718![](https://cdn.pixabay.com/photo/2024/01/19/18/08/bird-8519547_1280.jpg)# Title: Capturing the Charm of Feathered FriendsToday&#x27;s venture into the serene woods was a delightful encounter with nature&#x27;s delicate treasures. As I wandered throughthe dappled sunlight under the canopy, my camera was my faithful companion, ready to freeze moments in time.A soft trill caught my attention, leading me to a vibrant avian presence. A tiny bird, with feathers arrayed in hues ofblue and green, perched gracefully on a branch. It seemed almost aware of its own charm, bobbing and turning, as ifposing for an unseen audience.I snapped a sequence of shots, each click capturing a different angle of this natural splendor. The bird, in itsinnocence, carried on with its song, unaware of the beauty it bestowed upon my day.As I left the woods, my heart felt lighter, and my camera held a piece of joy that I will cherish. These moments ofconnection with nature are what truly nourish the soul.(_create by AI_) 读取并显示安装解析markdown需要的依赖 123npm i marked# orpnpm i marked 在代码中读取文件并解析 jsx12345678910111213141516171819202122// app/blog/[slug]/page.tsximport &#123;readFile&#125; from &quot;node:fs/promises&quot;;import &#123;marked&#125; from &quot;marked&quot;;// 服务端组件可以使用asyncexport default async function BlogPage(&#123; params, searchParams, &#125;: &#123; params: &#123; slug: string &#125; // 接收url参数: (/blog/[slug] -&gt; slug) searchParams: &#123;&#125;&#125;) &#123; const text = await readFile(`./contents/$&#123;params.slug&#125;.md`, &#x27;utf8&#x27;) const html = marked(text) return ( &lt;div&gt; &lt;div dangerouslySetInnerHTML=&#123;&#123;__html: html&#125;&#125;&gt;&lt;/div&gt; &lt;/div&gt; )&#125; 很好, 现在我们成功解析渲染了markdown文本到页面上! 效果: 解决文字样式问题你或许发现了, 我们的标题样式和普通文字是一样的, 这是因为tailwindcss清除了默认的css样式, 我们可以使用一个库来解决 tailwind-typography与默认样式解释https://tailwindcss.com/blog/tailwindcss-typography 123npm i -save-dev @tailwindcss/typography# orpnpm i -save-dev @tailwindcss/typography 注册为tailwind插件 12345678// tailwind.config.tsconst config: Config = &#123; /// ... plugins: [ require(&#x27;@tailwindcss/typography&#x27;) ],&#125;;export default config; 然后使用为组件添加prose类名 jsx1234567891011121314151617181920212223// app/blog/[slug]/page.tsximport &#123;readFile&#125; from &quot;node:fs/promises&quot;;import &#123;marked&#125; from &quot;marked&quot;;export default async function BlogPage(&#123; params, searchParams, &#125;: &#123; params: &#123; slug: string &#125; // 接收url参数: (/blog/[slug] -&gt; slug) searchParams: &#123;&#125;&#125;) &#123; const text = await readFile(`./contents/$&#123;params.slug&#125;.md`, &#x27;utf8&#x27;) const html = marked(text) return ( // flex flex-row justify-center -&gt; 内容居中 &lt;div className=&#123;&#x27;w-screen flex flex-row justify-center&#x27;&#125;&gt; &#123;/* prose让文本中的标题有对应的样式 */&#125; &lt;div className=&#123;&#x27;prose&#x27;&#125; dangerouslySetInnerHTML=&#123;&#123;__html: html&#125;&#125;&gt;&lt;/div&gt; &lt;/div&gt; )&#125; 重新启动服务, 再次访问页面 功能2: 提供API接口Nextjs会将api目录下的文件解析为后端接口, 接收http请求并进行处理. 我们将读取和解析markdown文件的操作放到后端(api目录)去, 而将渲染的工作留在前端(app目录) 试一下改变我们的目录结构 12345- app + api + blogs + [slug] + route.ts 此时文件系统和URL的对应关系是 1app/api/blogs/[slug]/route.ts -&gt; site.example.com/api/blogs/a, site.example.com/api/blogs/b, ... 编写处理请求的代码 123456789101112131415161718192021222324252627282930313233// api/blogs/route.tsimport &#123;NextRequest, NextResponse&#125; from &quot;next/server&quot;;import &#123;readFile&#125; from &quot;node:fs/promises&quot;;import &#123;marked&#125; from &quot;marked&quot;;// 接收GET请求export async function GET(req: NextRequest) &#123; // 解析url let slug = req.url.slice( req.url.lastIndexOf(&#x27;/&#x27;) + 1, req.url.length ) let html try &#123; // 读取md文件 const text = await readFile(`./contents/$&#123;slug&#125;.md`, &#x27;utf8&#x27;) html = marked(text) &#125; catch (err) &#123; console.error(err) // 错误返回 return NextResponse.json(&#123;error: err&#125;) &#125; // 返回html内容 return NextResponse.json(&#123;html&#125;)&#125;// 接收POST请求export async function POST(req: NextRequest) &#123; return NextResponse.json(&#123;&#125;)&#125; 看看结果: 访问不存在的md文件 访问正常存在的文件 在前端请求后端数据 jsx1234567891011121314151617181920212223242526272829// app/blog/[slug]/page.tsx// 服务端组件可以使用asyncexport default async function BlogPage(&#123; params, searchParams, &#125;: &#123; params: &#123; slug: string &#125; // 接收url参数: (/blog/[slug] -&gt; slug) searchParams: &#123;&#125;&#125;) &#123; // 请求后端数据 let res = await fetch(`http://localhost:3000/api/blogs/$&#123;params.slug&#125;`, &#123; method: &quot;GET&quot; &#125;) let json = await res.json() let html if (json.error) html = &quot;Ooh! Something went wrong&quot; else html = json.html return ( // flex flex-row justify-center -&gt; 内容居中 &lt;div className=&#123;&#x27;w-screen flex flex-row justify-center&#x27;&#125;&gt; &#123;/* prose让文本中的标题有对应的样式 */&#125; &lt;div className=&#123;&#x27;prose&#x27;&#125; dangerouslySetInnerHTML=&#123;&#123;__html: html&#125;&#125;&gt;&lt;/div&gt; &lt;/div&gt; )&#125; 结果: 正常访问 访问不存在的md文件 到这里, 我们就告一段落了, 为了防止文章过长, 我将其他内容放到了单独的篇章, 你可以在下面点击跳转阅读 下一步使用next-themes进行日夜主题切换你见过别人的网站可以切换为明亮和黑暗样式的主题吗, 我们也可以实现 next-themeshttps://www.npmjs.com/package/next-themes bloghttps://malcode-site.github.io/2024/08/27/nextjs/nextjs-beginner-themes/zh-cn/ 使用prisma连接数据库通过文件系统或缓存系统存储数据是一种选择, 但是使用数据库存储数据是更加常用的选择. prismahttps://www.prisma.io/ 使用next-auth进行身份验证身份验证是应用程序常见的功能, 使用next-auth可以免去自己编写登录注册页的麻烦, 专注于实现身份验证逻辑 next-authhttps://next-auth.js.org/ 使用tiptap作为富文本编辑器tiptap是一款现代化的无头富文本编辑器, 可以让我们轻松编写好看的页面内容 如何通过代码定制tiptap? 查看我的最新文章(todo) tiptap官方文档https://tiptap.dev/docs/editor/getting-started/overview","tags":["nextjs","frontend"],"categories":["nextjs","frontend"]},{"title":"Next.js 入門 - v13","path":"/2024/08/25/nextjs/nextjs-beginner/jp/","content":"nextjsとは何かnextjs は react に基づくフルスタック SSR（サーバーサイド レンダリング）フレームワークであり、reactの自動設定に関連付けられた一連のツールを提供します。これにより、我々はアプリケーションの構築に集中でき、設定手順を簡略化します。 もう一回お願いしますが、もっともそれで問題が解決しなかった場合、引き続き質問をお願いします。 nextjshttps://nextjs.org/docs サーバーサイド レンダリング（ssr）とは何かspaサーバーサイド レンダリングについて話を持ってみましょう。spa（単一ページ アプリケーション） と言えば、react や vueがその例です。これらは、クライアントに js をダウンロードさせ、コンパイル、ビルドしてから、js 仮想 dom オブジェクトを作成し、一度に index.html にmount（マウント）する手法を取ります。たとえば： spa アプリは、index.html ファイルを提供し、そこに指定された id を持つ div タグが含まれています 次に、spa の入力 js によって、プログラムをレンダリングし、指定された div に mount する 他のすべての変更は、それに基づいて行われます。だから、これらは単一ページ アプリケーションと呼ばれます。そして、spa アプリは、レンダリングとロジック処理を行う js ファイルをクライアントに置き、クライアントがレンダリングを担当するため、csrc（クライアントサイドレンダリング）アプリとも言えます。 一方、サーバーサイド レンダリングは、サーバーが html ファイルをレンダリングしてクライアントに渡す手法です。異なる要求に応じて対象のhtml ファイルを返す。 比較 パフォーメンスcsrc はクライアントにレンダリング任務を任せ、性能の悪い機器に対してはグlitチな動作を示すため、サーバーの負担は軽減されます。逆にssr は、リクエストの尖鋒時に大量の要求を処理するため、大きくなる壓力を逃れませんが、クライアントの負担を軽減する。 seo 友好性クライアントサイド レンダリングは、レンダリング前に web ページジョンスピーフィックに詳細な情報を得るのは困難であり、seoに対して友好的ではないが、サーバーサイド レンダリングは、レンダリング済みのファイルを検索エンジンスpiderに渡すため、この時点でのページジョンスピーフィックが基本的に完全であり、エンジンのアルゴリズムによる分析と認識を容易にする。 初回ロードタイムcsrc は js をクライアントにダウンロードさせてからレンダリングするため、jsがクライアントにダウンロードされるまでの間、空白の頁を見る可能性があります（最初の画面表示問題）一方、ssr はサーバーで html をまずレンダリングし、このステップを省略し、クライアントの負担を軽減するため、ユーザーに迅速にコンテンツを表示できます。 nextjs プロジェクトのセットアップgitリポジトリ本文の教育内容は github リポジトリに保管されており、学習の際に参照できます。異なるブランチには異なる章が対応します。 course-repositoryhttps://github.com/malred/hexo-blog-nextjs-course プロジェクトを作成する12345npx create-next-app@latest next-course# orpnpm dlx create-next-app@latest next-course# or pnpm create next-app 私のオープンソースプロジェクトを使用して作成する rust-init-clihttps://github.com/malred/rust-init-cli rust-cli-panelhttps://github.com/malred/rust-cli-panel 機能1: ファイルルーティングシステム Next.js 13では、React Server Componentsに基づいて新たなAppRouterが導入されました。このRouterでは、共有レイアウト、ネストされたルー、ロード状態、エラーハンドリングなどをサポートしています。 nextjs-routehttps://nextjs.org/docs/app/building-your-application/routing Next.js は自動的に app ディレクトリ内の page.jsx/.tsxファイルを認識し、ページを作成すると共に、親ディレクトリか同じ階層の layout.jsx/.tsx ファイルをレイアウトとしてレンダリングします。 試してみましょうブログサイトを作成すると仮定します。サイト内のブログへのアクセスパスが site.example&#x2F;blog&#x2F;test&#x2F;というものであるとき、こんなディレクトリ構造を作成してみましょう。 123456- app + blog + test + page.tsx - page.tsx - layout.tsx jsx123456789// app/blog/test/page.tsxexport default function TestBlogPage() &#123; return ( &lt;div&gt; Hi, there is a blog page! &lt;/div&gt; )&#125; app/page.tsxファイルに、それへのリンクを追加してください jsx1234567891011// app/page.tsxexport default function Home() &#123; return ( &lt;div&gt; &lt;a href=&#123;&#x27;/blog/test&#x27;&#125;&gt; Go to test blog &lt;/a&gt; &lt;/div&gt; );&#125; 起動させてください： 123npm run dev# or pnpm dev http://localhost:3000http://localhost:3000 ok, デフォルトのcssスタイルのため、見た目が少し変なようです globals.css内の内容を編集して、背景をきれいにしましょう。 12345:root &#123; /*--foreground-rgb: 0, 0, 0;*/ /*--background-start-rgb: 214, 219, 220;*/ /*--background-end-rgb: 255, 255, 255;*/&#125; 效果 トップページ 「Go to test blog」をクリックしてください Ok, この挑戦に成功しました！ ルーをURLへのマッピング先ほどの例からわかるように、ファイルとルーの間のマッピング関係は次の通りです： file://site.dir/app/a/b/page.jsx -> site.example/a/b 動的ルーあなたはもしかしたら、現在のURLがハードコーディングされていることに気づくかもしれません。10ページ分異なるブログページが必要とする場合（たとえばblog&#x2F;test2,blog&#x2F;abc, blog&#x2F;startなど）、この方法では10ページ分のxxx&#x2F;page.js&#x2F;jsx&#x2F;ts&#x2F;tsxを手動で作成する必要があります。時間がかかり、效率的ではありません。 もちろん、Next.jsはこれを解決するための動的ルー機能を提供しています。 そのファイルルーのマッピングは次のようになります： file://site.dir/app/blog/[slug]/page.jsx -> site.example/blog/a, site.example/blog/b, site.example/blog/c 試してみましょう私たちのディレクトリ構造を編集してください。 1234- app - blog + [slug] + page.tsx ブログの内容ページを作成します。 jsx12345678910// app/blog/[slug]/page.tsxexport default function BlogPage() &#123; return ( &lt;div&gt; &#123;/*生成随机数*/&#125; blog &#123;Math.round(Math.random() * 10)&#125; &lt;/div&gt; )&#125; ブログ/aにアクセスすると、私たちの [slug]/page に到着しました もし先ほどのblog/test/pageを残していれば、それが引き続き有効であることがわかります レイアウトNext.jsはレイアウトファイルを提供し、複数のルー間で共有されるUI機能を果たします。ナビゲーション時には、レイアウトは状態を維持しながら対話型を保って再描画しません。レイアウトはネスト可能でもあります。 レイアウトファイルを分析してみましょう。 jsx123456789101112131415161718192021222324252627import type &#123;Metadata&#125; from &quot;next&quot;;import &#123;Inter&#125; from &quot;next/font/google&quot;;import &quot;./globals.css&quot;;// これはフォントで、暫定的に気にしないでくださいconst inter = Inter(&#123;subsets: [&quot;latin&quot;]&#125;);// ページのメタデータを提供しますexport const metadata: Metadata = &#123; title: &quot;Create Next App&quot;, description: &quot;Generated by create next app&quot;,&#125;;export default function RootLayout(&#123; children, &#125;: Readonly&lt;&#123; children: React.ReactNode;&#125;&gt;) &#123; return ( &lt;html lang=&quot;en&quot;&gt; &lt;body className=&#123;inter.className&#125;&gt; &#123;/*childrenはサブディレクトリの内容である（サブディレクトリのレイアウトとページを含む）*/&#125; &#123;children&#125; &lt;/body&gt; &lt;/html&gt; );&#125; ナビゲーションバーとフッターバーを追加しましょう。jsx12345678910111213141516171819// components/footbar.tsxexport default function Footbar() &#123; return ( &lt;footer className=&#123;&#x27;bg-gray-200 border-b border-b-gray-300 border-t border-t-gray-300 sticky h-20 w-full&#x27;&#125;&gt; footbar &lt;/footer&gt; )&#125;// components/navbar.tsxexport default function Navbar() &#123; return ( &lt;nav className=&#123;&#x27;bg-green-200 border-b border-b-gray-300 sticky w-full h-20&#x27;&#125;&gt; navbar &lt;/nav&gt; )&#125; まだtailwindcssを学んでいないかもしれません。この記事をご覧ください（todo） それらをlayout.tsxに追加してください。 jsx123456789101112131415161718// app/layout.tsx/// export default function RootLayout(&#123; children, &#125;: Readonly&lt;&#123; children: React.ReactNode;&#125;&gt;) &#123; return ( &lt;html lang=&quot;en&quot;&gt; &lt;body className=&#123;inter.className&#125;&gt; &lt;Navbar/&gt; &#123;/*children就是子目录里的内容（包含子目录的layout和page）*/&#125; &#123;children&#125; &lt;Footbar/&gt; &lt;/body&gt; &lt;/html&gt; );&#125; 効果： ブログの内容を提供するOK、今は異なる名前をマッチングすることができる動的ルーを持っており、ナビゲーとフッターも作成しましたが、私たちはページにより多くのコンテンツを表示することを望んでいます。 Markdownを書く多くのメモ帳ソフトウェアはMarkdown構文をサポートしており、個人的には好んでいる方法です。現在、多数のnpmライブラリーはMarkdownファイルの内容をHTMLの富文本文字列に解析することができます。 Markdown構文を学ぶ？ wikiをチェックしてください、または私の新しい記事を待ってください（todo）https://en.wikipedia.org/wiki/Markdown ディレクトリ構造を変更してください 123456- app - ...- contents - mountain.md - bird.md - flower.md mountain.md123456789101112131415161718![](https://cdn.pixabay.com/photo/2022/10/24/12/20/mountains-7543273_1280.jpg)# Title: Summit Reflections: A Mountain&#x27;s Mirror to the SoulClimbing mountains is more than a physical endeavor; it&#x27;s a journey of the spirit, where each peak reveals a facet ofinner strength. As I scaled the rugged trails, the grind of my boots against rock echoed the resilience required tosurmount life&#x27;s challenges. The ascent, steep and demanding, taught me endurance. With each step, I found a metaphor forthe effort needed to achieve one&#x27;s dreams.The view from the summit was not just a vista of vast landscapes but a perspective on the infinite possibilities lifeoffers. It reminded me that after every great effort comes a broad expanse of opportunity. The descent, oftenoverlooked, was no less instructive. It spoke of humility and caution; a reminder that what goes up must come down withgrace.This mountain experience distilled life into a simple yet profound truth: the journey matters as much as thedestination. It&#x27;s in the climb that we discover our mettle and in the view that we savor our triumphs.(_create by AI_)flower.md1234567891011121314151617![](https://cdn.pixabay.com/photo/2023/03/19/05/31/flower-7861942_960_720.jpg)# Title: Blossoming Insights: A Whiff of FlowersAs I meandered through the garden, the air was thick with the sweet perfume of blooming flowers. Each petal, a tenderbrushstroke on nature&#x27;s canvas, painted a picture of grace and resilience. The flowers, in their silent language, spokeof beauty that survives amidst the harshest conditions.A delicate rose, its petals softer than silk, nodded gently in the breeze. It reminded me that even the most stunningforms can emerge from thorny paths. In the blossoms, I saw a reflection of life&#x27;s inherent beauty and the fortitude toflourish despite challenges.The garden, with its kaleidoscope of colors, became a sanctuary where every flower told a story of transformation andgrowth. My spirits were lifted by this quiet symphony of scents and hues, a testament to nature&#x27;s power to inspire andreplenish the soul.(_create by AI_)bird.md123456789101112131415161718![](https://cdn.pixabay.com/photo/2024/01/19/18/08/bird-8519547_1280.jpg)# Title: Capturing the Charm of Feathered FriendsToday&#x27;s venture into the serene woods was a delightful encounter with nature&#x27;s delicate treasures. As I wandered throughthe dappled sunlight under the canopy, my camera was my faithful companion, ready to freeze moments in time.A soft trill caught my attention, leading me to a vibrant avian presence. A tiny bird, with feathers arrayed in hues ofblue and green, perched gracefully on a branch. It seemed almost aware of its own charm, bobbing and turning, as ifposing for an unseen audience.I snapped a sequence of shots, each click capturing a different angle of this natural splendor. The bird, in itsinnocence, carried on with its song, unaware of the beauty it bestowed upon my day.As I left the woods, my heart felt lighter, and my camera held a piece of joy that I will cherish. These moments ofconnection with nature are what truly nourish the soul.(_create by AI_) ファイルを読み取り表示するMarkdownを解析するための依存関係をインストールします。 123npm i marked# orpnpm i marked コードからファイルを読み取り解析します。 jsx12345678910111213141516171819202122// app/blog/[slug]/page.tsximport &#123;readFile&#125; from &quot;node:fs/promises&quot;;import &#123;marked&#125; from &quot;marked&quot;;// サーバーサイドコンポーネントは asyncを使用できますexport default async function BlogPage(&#123; params, searchParams, &#125;: &#123; params: &#123; slug: string &#125; // URLパラメータを受け取る (/blog/[slug] -&gt; slug) searchParams: &#123;&#125;&#125;) &#123; const text = await readFile(`./contents/$&#123;params.slug&#125;.md`, &#x27;utf8&#x27;) const html = marked(text) return ( &lt;div&gt; &lt;div dangerouslySetInnerHTML=&#123;&#123;__html: html&#125;&#125;&gt;&lt;/div&gt; &lt;/div&gt; )&#125; よいです、今私たちはmarkdownテキストをページへの解析レンダリングに成功しました！ 効果： 文字スタイルの問題を解決するあなたはおそらく気づいています、私たちの見出しスタイルと普通のテキストが同じです。これはtailwindcssがデフォルトのCSSスタイルをクリアーしたためです。私たちはライブラリを使用してこの問題を解決できます。 tailwind-typographyとデフォルトスタイルの解釈https://tailwindcss.com/blog/tailwindcss-typography 123npm i -save-dev @tailwindcss/typography# orpnpm i -save-dev @tailwindcss/typography Tailwind CSSプラグインとして登録する 12345678// tailwind.config.tsconst config: Config = &#123; /// ... plugins: [ require(&#x27;@tailwindcss/typography&#x27;) ],&#125;;export default config; そしてコンポーネントにproseクラス名を追加します。 jsx1234567891011121314151617181920212223// app/blog/[slug]/page.tsximport &#123;readFile&#125; from &quot;node:fs/promises&quot;;import &#123;marked&#125; from &quot;marked&quot;;export default async function BlogPage(&#123; params, searchParams, &#125;: &#123; params: &#123; slug: string &#125; // 接收url参数: (/blog/[slug] -&gt; slug) searchParams: &#123;&#125;&#125;) &#123; const text = await readFile(`./contents/$&#123;params.slug&#125;.md`, &#x27;utf8&#x27;) const html = marked(text) return ( // flex flex-row justify-center -&gt; 内容居中 &lt;div className=&#123;&#x27;w-screen flex flex-row justify-center&#x27;&#125;&gt; &#123;/* proseにより、テキスト中の見出しに対応するスタイルが与えられます。 */&#125; &lt;div className=&#123;&#x27;prose&#x27;&#125; dangerouslySetInnerHTML=&#123;&#123;__html: html&#125;&#125;&gt;&lt;/div&gt; &lt;/div&gt; )&#125; サービスを再起動し、ページを再度訪問します。 機能2: APIインターフェイスの提供Next.jsはapiディレクトリ下のファイルをバックエンドインターフェイスとして解析するため、HTTPリクエストを受け入れて処理を行います。 私たちはMarkdownファイルの読み取りと解析操作をバックエンド（apiディレクトリ）に移し、レンダリング操作をフロントエンド（appディレクトリ）に残します。 試してみましょうディレクトリ構造を変更しましょう。 12345- app + api + blogs + [slug] + route.ts この時点でのファイルシステムとURLの対応関係は 1app/api/blogs/[slug]/route.ts -&gt; site.example.com/api/blogs/a, site.example.com/api/blogs/b, ... リクエストを処理するコードを書きます。 123456789101112131415161718192021222324252627282930313233// api/blogs/route.tsimport &#123;NextRequest, NextResponse&#125; from &quot;next/server&quot;;import &#123;readFile&#125; from &quot;node:fs/promises&quot;;import &#123;marked&#125; from &quot;marked&quot;;// 接收GET请求export async function GET(req: NextRequest) &#123; // 解析url let slug = req.url.slice( req.url.lastIndexOf(&#x27;/&#x27;) + 1, req.url.length ) let html try &#123; // 读取md文件 const text = await readFile(`./contents/$&#123;slug&#125;.md`, &#x27;utf8&#x27;) html = marked(text) &#125; catch (err) &#123; console.error(err) // 错误返回 return NextResponse.json(&#123;error: err&#125;) &#125; // 返回html内容 return NextResponse.json(&#123;html&#125;)&#125;// 接收POST请求export async function POST(req: NextRequest) &#123; return NextResponse.json(&#123;&#125;)&#125; 結果を見てください： 存在しないmdファイルにアクセス 通常のファイルにアクセス フロントエンドからバックエンドデータをリクエスト jsx1234567891011121314151617181920212223242526272829// app/blog/[slug]/page.tsx// 服务端组件可以使用asyncexport default async function BlogPage(&#123; params, searchParams, &#125;: &#123; params: &#123; slug: string &#125; // 接收url参数: (/blog/[slug] -&gt; slug) searchParams: &#123;&#125;&#125;) &#123; // 请求后端数据 let res = await fetch(`http://localhost:3000/api/blogs/$&#123;params.slug&#125;`, &#123; method: &quot;GET&quot; &#125;) let json = await res.json() let html if (json.error) html = &quot;Ooh! Something went wrong&quot; else html = json.html return ( // flex flex-row justify-center -&gt; 内容居中 &lt;div className=&#123;&#x27;w-screen flex flex-row justify-center&#x27;&#125;&gt; &#123;/* prose让文本中的标题有对应的样式 */&#125; &lt;div className=&#123;&#x27;prose&#x27;&#125; dangerouslySetInnerHTML=&#123;&#123;__html: html&#125;&#125;&gt;&lt;/div&gt; &lt;/div&gt; )&#125; 結果： 通常のアクセス 存在しないmdファイルにアクセス ここまで、私たちは一旦おさらぐことにします。長い文章を防ぎ、他の内容を別の篇章にまきましており、下のリンクをクリックすることができます。 次のステップnext-themesを使用して日夜テーマを切替える他人のウェブサイトが明るいテーマと暗いテーマを切り替えることがあっただろうか、私たちも実現することができます。 next-themeshttps://www.npmjs.com/package/next-themes bloghttps://malcode-site.github.io/2024/08/27/nextjs/nextjs-beginner-themes/jp/ prismaを使用してデータベースに接続するファイルシステムやキャッシュシステムを介してデータを保管するのが一種の選択肢ですが、より一般的に使用されるのはデータベースです。 prismahttps://www.prisma.io/ next-authを使用して認証を行うアプリケーションの一般的な機能として、next-authを使用することでログインと登録ページを自分で作成する必要がなくなり、認証ロジックの実現に専念することができます。 next-authhttps://next-auth.js.org/ tiptapを使用してリッチテキストエディタとするtiptapは現代的なヘッドレスリッチテキストエディタであり、私たちは魅力のあるページコンテンツを簡単に書くことができます。 コードを通じてtiptapをカスタマイズする方法は？最新の記事をチェックアウトしてください(todo) tiptap公式ガイドhttps://tiptap.dev/docs/editor/getting-started/overview","tags":["nextjs","frontend"],"categories":["nextjs","frontend"]},{"title":"如何做网站SEO - 面向初学者","path":"/2024/08/25/seo/how-to-SEO/zh-cn/","content":"说在前面我正在使用hexos记录我的博客文章, 但是我暂时没有找到如何对我当前的外观主题进行国际化配置, 所以我使用中英混合的方法写作(我也会尝试全英和全中文分开写文章) 如果觉得我的风格不太好, 请在评论区告诉我如何改进 什么是SEOSEO是Search Engine Optimization的简写, 它就是利用各种技术和过程，提高网站在搜索引擎结果页中的自然排名，以增加网站的有针对性的流量, 从而为你的网站或你的产品提高销售额, 带来更多收益 它不是一种可以简单地直接购买的服务, 或者一种死板不变的技术, 它是一个需要持续性付出有效努力的决策. 所以, 没有任何一个人可以肯定地说, 我的SEO方案是唯一且有效的, 是绝对通用的. 但是, 我将给予你一些建议, 来为你提供可用的参考. SEO策略1: 页内SEO页内SEO指的是针对你的网站的内容进行优化, 以更好地提供服务, 并让搜索引擎能够更好地抓取和检索到你的网站. 1. 优化文案内容 高质量内容:高质量的内容是很重要的, 当你的内容越优质, 用户越会留存, 并可能查看你的站点的更多信息, 用户停留的时间越长,搜索引擎算法会认为你的网站内容是用户中心和高质量的, 并更多地为其他潜在用户推荐 相关性搜索引擎会根据内容的搜索相关性来进行分析, 你的网站内容和用户的搜索关键词相关度高的时候, 你的网站排名会提高. 良好易读结构当我们第一次阅读一篇文章, 最先关注的往往不是密集的文字, 而是显而易见的醒目标题, 如果能提高良好的标题结构, 会利用用户进行查看,而不是被大段的文字吓退 图片中的alt属性如果你是网站的编程人员, 那么, 为img标签提供alt属性值是有帮助的, 搜索引擎算法会将alt值和图片进行关联, 从而更好地理解图片内容 链接Link的rel属性如果你是网站的编程人员, 你可以通过a标签的rel属性向谷歌搜索引擎说明您的网站与链接页之间的关系, 防止追踪某些广告链接等可能和内容无关的信息More_Infohttps://developers.google.com/search/docs/crawling-indexing/qualify-outbound-links 2. URL优化当我们访问网络上的一个资源, 总是会在网站搜索框中输入对应的URL地址, 试想一下,如果一个图片的地址是site.example&#x2F;?b&#x3D;fksdlfnwejl&amp;a&#x3D;jlfnhwnfgevrnv%dfa%fs%fsa,你会它真实可信吗如果是image.com&#x2F;img&#x2F;nature&#x2F;butterfly.png呢 让URL具有易读性简化你的URL, 如果你的网站是博客网站, 那么用博客名称作为url的一部分是不错的, 比如site.com&#x2F;blogs&#x2F;how-to-seo&#x2F; URL中放入关键词在URL中放入关键词可用方便搜索引擎识别, 也可以让用户明确他将要看到的是什么类型的内容 SEO策略2: 页外SEO页外SEO就是在你站点之外进行的SEO操作, 比如在他人网站上发布链接&#x2F;在社交平台分享你的网站…, 页外SEO往往需要时间的积累,不是可以简单购买或优化站点内容就能做到的 我将分享几点页外SEO的可行策略: 分享(Sharing)创造优质的内容固然重要, 但是也需要让用户可以看到, 写下优质的文章, 并且让你的用户可以轻松地分享你的站点(比如在wordpress上使用社交分享插件), 这将增加你的影响力 良好的URL(Good URLs)让你的网站的URL易于分享, 如果你的网站URL看起来很奇怪, 外部用户可能不会点开 在社交媒体上运营(Social Media Presence)社交媒体是现代人最常使用的网络服务, 天生就可以带来巨大曝光量, 运营好你的网站账号, 分享有价值的站点内容到社交平台上,可以帮助你积累更多客户 建立反向链接(Building Backlinks)反向链接是从一个网站上的页面到另一个网站的链接, 如果你的内容够好, 在外部网站中被引用(或者你发布到别的网站上),这将会给你带来额外的流量. SEO工具 semrush 关键词挖掘&#x2F;同行网站分析等综合性工具 semrushhttps://www.semrush.com/ moz 外链分析工具 mozhttps://moz.com/ Kwfinder 关键词分析工具 kwfinderhttps://mangools.com/kwfinder Spinrewriter 英文伪原创工具 LongTailPro 长尾关键词分析工具 WooRank 网站SEO优化评估 Ubersuggest 综合SEO工具 WordAI 基于AI生成伪原创内容 Indexification 让你的英文外链更快被收录 Spamzilla 过期域名检索, 寻找并购买带外链的过期域名 . iSpionage 竞争情报分析, 助力优化SEO StoryBase 长尾关键词研究工具 更多搜索引擎总是在变化的, SEO策略也要与时俱进, 本篇文章或许不久就会过时, 但是你依然可以作为决策的参考. 本篇文章不可能将所有的知识写出来, 但是提供了一个基本的框架. 为了学习更多更深入的SEO方案, 我推荐你去Google的搜索引擎文档中进一步的学习 developers.google.com/searchhttps://developers.google.com/search/docs/fundamentals/seo-starter-guide 最后感谢你的观看","tags":["SEO","beginner"],"categories":["SEO","beginner"]},{"title":"How to do SEO - For Beginners (en)","path":"/2024/08/25/seo/how-to-SEO/en/","content":"beforeI am using Hexo to document my blog articles, but I haven’t found how to configure the internationalization of mycurrent theme appearance, so I write in a mix of Chinese and English. (I will also try to write articles separately in full English and full Chinese). If you think my style is not very good,please tell me how to improve in the comments section. What is SEOSEO, which stands for Search Engine Optimization, involves utilizing various techniques and processes to enhance awebsite’s natural ranking in search engine results pages (SERPs). This, in turn, increases targeted traffic to your siteor product, thereby boosting sales and revenue. It is not a service that can simply be bought directly, nor is it an unchanging technology; rather, it is a decisionthat requires continuous and effective effort. Therefore, no one can definitively claim that their SEO strategy is the only effective one or absolutely universal.However, I will provide you with some suggestions to offer viable references. SEO Strategy 1: On-Page SEOOn-page SEO refers to optimizing the content of your website to better serve users and enable search engines to moreeffectively crawl and index your site. 1. Optimize the Content of Copywriting High-Quality Content:High-quality content is essential. The better your content, the more users will stay and potentially explore moreinformation on your site. The longer users stay, the more search engine algorithms will consider your site’s contentto be user-centric and high-quality, thereby recommending it more to other potential users. RelevanceSearch engines analyze content based on its relevance to searches. When your site’s content is highly relevant tousers’ search keywords, your site’s ranking will improve. Good Readability StructureWhen we first read an article, our initial focus is often not on dense text but on prominent headlines. If you canenhance the structure of your headlines, it will encourage users to look further instead of being intimidated by largeblocks of text. Alt Attributes in ImagesIf you are a website programmer, providing alt attribute values for img tags is helpful. Search engine algorithmsassociate alt values with images to better understand their content. Rel Attribute of LinksIf you are a website programmer, you can use the rel attribute of the a tag to explain to Google’s search engine therelationship between your site and the linked page, preventing the tracking of certain advertisement links or otherpotentially irrelevant information.More_Infohttps://developers.google.com/search/docs/crawling-indexing/qualify-outbound-links 2. URL OptimizationWhen we access a resource online, we always enter the corresponding URL into the website’s search bar. Imagine this: ifan image’s address is site.example&#x2F;?b&#x3D;fksdlfnwejl&amp;a&#x3D;jlfnhwnfgevrnv%dfa%fs%fsa, would you consider it trustworthy?How about image.com&#x2F;img&#x2F;nature&#x2F;butterfly.png? Make URLs ReadableSimplify your URLs. If your website is a blog, using the blog name as part of the URL is a good idea, such assite.com&#x2F;blogs&#x2F;how-to-seo&#x2F; Include Keywords in URLsIncluding keywords in the URL can help search engines recognize them and also let users know what type of content theyare about to see. SEO Strategy 2: Out-Page SEOOff-page SEO refers to the SEO activities conducted outside your own website, such as publishing links on other websitesor sharing your site on social media platforms. Off-page SEO often requires time to accumulate and cannot be simplyachieved through purchasing or optimizing site content. I will share a few viable strategies for off-page SEO: SharingCreating high-quality content is important, but it also needs to be seen by users. Write excellent articles and makeiteasy for your users to share your site (for example, use social sharing plugins on WordPress). This will increase yourinfluence. Good URLsMake your website’s URLs easy to share. If your website URL looks strange, external users may not click on it. Social Media PresenceSocial media is one of the most frequently used online services by modern people and inherently offers significantexposure. Managing your website’s accounts well and sharing valuable content from your site on social platforms canhelp you accumulate more customers. Building BacklinksBacklinks are links from one website page to another. If your content is good enough to be cited on external sites (orif you post on other sites), this will bring you additional traffic. SEO tools semrush Keywords Mining&#x2F;Comprehensive Tools for Competitor Website Analysis semrushhttps://www.semrush.com/ moz Backlink Analysis Tools mozhttps://moz.com/ Kwfinder Keywords Analysis Tools kwfinderhttps://mangools.com/kwfinder Spinrewriter Translation English Pseudo-Original Tool LongTailPro Long Tail Keyword Analysis Tool WooRank Website SEO Optimization Evaluation Ubersuggest Comprehensive SEO Tool WordAI AI-generated pseudo-original content Indexification Accelerate the indexing of your English backlinks. Spamzilla Expired domain search, locate and purchase expired domains with existing backlinks. iSpionage Competitive intelligence analysis to enhance SEO optimization. StoryBase Long-tail keyword research tool. moreSearch engines are always evolving, and so must SEO strategies. This article may soon be outdated, but it can stillserve as a reference for decision-making. This article cannot cover all the knowledge, but it provides a basic framework. For more in-depth SEO strategies, Irecommend further study in Google’s search engine documentation. developers.google.com/searchhttps://developers.google.com/search/docs/fundamentals/seo-starter-guide after allthanks for watch","tags":["SEO","beginner"],"categories":["SEO","beginner"]},{"title":"byd","path":"/2024/08/24/测试/byd/","content":"byd testa test image我的公众号 logo 宽度较小而高度较大的图片，可以设置宽、高、填充间距、背景色等对其布局进行优化，使得它在不同宽度的屏幕下都能获得不错的视觉体验： 可以设置填充宽度和颜色，支持 bg:var(–card) 动态颜色，能够适配暗黑模式： emojimore emoji icon 图标标签more iconicons.yml 中的图标：外链图标：指定颜色： mark支持多彩标记，包括： 默认 红 橙 黄 绿 青 蓝 紫 亮 暗 警告 错误 一共 12 种颜色。 hashtag 标签如果没有指定颜色，且没有设置默认颜色，则随机取一个颜色，快来试试吧～ Stellar Hexo GitHub Gitea quote适合居中且醒目的引用：Stellar 是迄今为止最好用的主题支持自定义引号：热门话题、特别引用此外，加上 el:h2&#x2F;h3&#x2F;h4&#x2F;h5&#x2F;h6 可以作为标题使用 任意图标引用这是一个 icons.yml 配置的示例 这是一个 url 的示例 诗词游山西村陆游莫笑农家腊酒浑，丰年留客足鸡豚。山重水复疑无路，柳暗花明又一村。箫鼓追随春社近，衣冠简朴古风存。从今若许闲乘月，拄杖无时夜叩门。诗词节选 paper 纸张标签文言文出师表先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。后出师表先帝深虑汉、贼不两立，王业不偏安，故托臣以讨贼也。以先帝之明，量臣之才，固知臣伐贼，才弱敌强也。然不伐贼，王业亦亡。惟坐而待亡，孰与伐之？是故托臣而弗疑也。诸葛亮三国节选 reel 卷轴滕王阁序王勃时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。重九日节选 可选参数title: # 标题author: # 作者date: # 日期footer: # 页脚信息 note 备注块title: 标题（可选）content: 内容color: red&#x2F;orange&#x2F;yellow&#x2F;green&#x2F;cyan&#x2F;blue&#x2F;purple&#x2F;light&#x2F;dark&#x2F;warning&#x2F;error [title]content [color:color] 具有标题的备注块直接写备注内容，默认是和代码块一样的样式，第一个空格前面的是标题，后面的是正文，如果标题中需要显示空格，请使用 &nbsp; 代替。 这&nbsp;是标题这是正文 哈哈。 彩色备注块一共支持12种颜色，可以满足几乎所有的需求了。color 可设置 red、orange、amber、yellow、green、cyan、blue、purple、light、dark、warning、error 几种取值。 一共支持12种颜色，可以满足几乎所有的需求了。color 可设置 red、orange、amber、yellow、green、cyan、blue、purple、light、dark、warning、error 几种取值。 导航栏文章项目留言GitHub 复制行 $ 目标管理 O1 2024年的小目标：完成 Volantis 6.0 并发布上线 来自2025年的复盘：已《基本》实现目标 正常 44% KR1 重构 tag-plugins 和 wiki 系统 当 KR 进度为 100% 时，标签默认显示为 已完成当 KR 未设置进度时，默认为 0%当 O 未设置进度时，则显示所有 KR 进度平均值 已完成 100% KR2 完成主要页面设计稿 小提示1小提示2您可以在 _config.yml 文件中修改标签的颜色和文案您可以在 _config.yml 文件中增加任意的标签配置 延期 90% KR3 完成前置准备工作（如果你知道答案，请在留言区帮帮我！🥹） 在咸水和海滩之间找一亩地求出圆周率后15位找出宇宙的终极逻辑去地狱里走两步 未完成 -12% KR-4 开发、测试和发布 支持嵌套插入图片等其它简单组件 风险 0% 链接[title] [icon:src] [desc:true/false]https://malcode-site.github.io/href 不带摘要的样式： https://xaoxuu.com/blog/20221029/https://xaoxuu.com/blog/20221029/ 带摘要的样式： https://xaoxuu.com/blog/20221029/https://xaoxuu.com/blog/20221029/ 写法href: 链接 title: 可选，手动设置标题（为空时会自动抓取页面标题） icon: 可选，手动设置图标（为空时会自动抓取页面图标） desc: 可选，是否显示摘要描述，为true时将会显示页面描述 按钮探索 单选没有勾选的单选框 已勾选的单选框 多选普通的没有勾选的复选框 普通的已勾选的复选框 显示为加号的绿色的已勾选的复选框 显示为减号的黄色的已勾选的复选框 显示为乘号的红色的已勾选的复选框 音频 Your browser does not support the audio tag. 视频 Your browser does not support the video tag. Your browser does not support the video tag. 文本修饰 这是 密码 标签 这是 下划线 标签 这是 着重号 标签 这是 波浪线 标签 这是 删除线 标签 这是 上角标 标签 这是 下角标 标签 这是 键盘样式 标签，试一试：⌘ + D 数据类标签https://xaoxuu.com/wiki/stellar/tag-plugins/data/https://xaoxuu.com/wiki/stellar/tag-plugins/data/ 容器类标签https://xaoxuu.com/wiki/stellar/tag-plugins/container/https://xaoxuu.com/wiki/stellar/tag-plugins/container/ Your browser does not support the video tag. Your browser does not support the video tag.","tags":["test"],"categories":["test"]},{"title":"about","path":"/about/index.html","content":"关于我课程网站我已经开始计划在公开的课程平台上发布我的课程, 在一些平台发布免费基础的内容, 而另一些则发布付费进阶课程,等我搞好了, 将会把链接公布出来 技能 skill 前端：nextjs、react、vue 视频剪辑：剪映、Pr SEO …… 联系我 Contact me QQ：2725953379 微信wechat：wxid_2v430cosezqv22 邮箱email：&#x6d;&#x61;&#108;&#x67;&#117;&#121;&#x32;&#48;&#50;&#x32;&#64;&#x31;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;"},{"title":"Portfolio","path":"/show/index.html","content":"作品集 (Portfolio)接前端开发, 社群推广营销, 文案写作（AI赋能）, seo优化Accepting commissions for front-end development, community promotion and marketing, copywriting (AI-empowered), and SEOoptimization. 创业经验视频剪辑快手6000+播放（米玖剪辑）、抖音近2000播放（米玖街头） 静态站点建设 (Static Site Construction)我已经创建过两个静态站点，您还在烦恼主题、插件、内容编辑……？这些似乎需要耗费不少时间，咨询一个有过类似经验的开发者是明智的选择（比如我）I have already created two static sites. Are you still troubled by themes, plugins, content editing…? These seem totake a lot of time. It is wise to consult a developer who has had similar experience (such as myself). 我有hexo和wordpress建站经验，可以为您进行定制化开发和构建，为您省去时间和额外雇佣员工的开销。有意向？联系我I have experience in building websites with Hexo and WordPress, and can perform customized development and constructionfor you, saving you time and the expense of hiring additional staff. Interested? Contact me. SEO经验您的网站需要谷歌SEO优化？ 我已使用github page部署过两个静态站点，其中一个是malred.github.io，另一个是malguy2022.github.io 我为我的站点做过SEO搜索引擎优化，当你搜索malred时，出现的就是我的站点 需要谷歌SEO优化？联系我 编程项目 (Programming Project)正在学习IT技术，并且希望获得更高的技能水平和更新的知识？联系我 Rust-cli-panelrust, tauri, react编写创建前端项目的GUI界面 MalORMjava全自动ORM框架 自媒体运营经验 (Self-media Operation Experience)米玖二次元专注于分享动漫图片，并引流到私域微信群 其他"}]